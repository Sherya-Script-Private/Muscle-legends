local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Sherya-Script-Private/Elerium-V5/refs/heads/main/Library", true))()
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local startTime = os.time()
local startRebirths = player.leaderstats.Rebirths.Value
local displayName = player.DisplayName

-- Anti-AFK System
local VirtualUser = game:GetService("VirtualUser")
local antiAFKConnection

local function setupAntiAFK()
    -- Disconnect previous connection if it exists
    if antiAFKConnection then
        antiAFKConnection:Disconnect()
    end
    
    -- Connect to PlayerIdleEvent to prevent AFK kicks
    antiAFKConnection = player.Idled:Connect(function()
        VirtualUser:CaptureController()
        VirtualUser:ClickButton2(Vector2.new())
        print("Anti-AFK: Prevented idle kick")
    end)
    
    print("Anti-AFK system enabled")
end

-- Initialize Anti-AFK system
setupAntiAFK()

-- Create Main Window
local window = library:AddWindow("Sherya Script | Galaxy Hub", {
    main_color = Color3.fromRGB(75, 0, 130),
    min_size = Vector2.new(600, 660),
    can_resize = true,
})

local mainTab = window:AddTab("Main")
local farmTab = window:AddTab("Farm")
local miscTab = window:AddTab("Misc")
local pets = window:AddTab("Pets")
local Stats = window:AddTab("Stats")
local Calculator = window:AddTab("Calculator")
local Killer = window:AddTab("Killer")
local Farm = window:AddTab("Packs")
local teleport = window:AddTab("Teleport")
local creditsTab = window:AddTab("Credits")

local BrawlFolder = mainTab:AddFolder("  Auto Brawls")

local godModeToggle = false
        BrawlFolder:AddSwitch("God Mode Brawl", function(State)
            godModeToggle = State
            if State then
                task.spawn(function()
                    while godModeToggle do
                        game:GetService("ReplicatedStorage").rEvents.brawlEvent:FireServer("joinBrawl")
                        task.wait(0)
                    end
                end)
            end
        end)

local autoWinBrawlToggle = BrawlFolder:AddSwitch("Auto Win Brawls", function(bool)
    getgenv().autoWinBrawl = bool

    local function equipPunch()
        if not getgenv().autoWinBrawl then return end
        local character = game.Players.LocalPlayer.Character
        if not character then return false end
        if character:FindFirstChild("Punch") then return true end
        local backpack = game.Players.LocalPlayer.Backpack
        if not backpack then return false end
        for _, tool in pairs(backpack:GetChildren()) do
            if tool.ClassName == "Tool" and tool.Name == "Punch" then
                tool.Parent = character
                return true
            end
        end
        return false
    end

    local function isValidTarget(player)
        if not player or not player.Parent then return false end
        if player == Players.LocalPlayer then return false end
        if _G.whitelistedPlayers and table.find(_G.whitelistedPlayers, player.Name) then return false end
        local character = player.Character
        if not character or not character.Parent then return false end
        local humanoid = character:FindFirstChild("Humanoid")
        if not humanoid then return false end
        if not humanoid.Health or humanoid.Health <= 0 then return false end
        if humanoid:GetState() == Enum.HumanoidStateType.Dead then return false end
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if not rootPart or not rootPart.Parent then return false end
        return true
    end

    local function isLocalPlayerReady()
        local player = game.Players.LocalPlayer
        if not player then return false end
        local character = player.Character
        if not character or not character.Parent then return false end
        local humanoid = character:FindFirstChild("Humanoid")
        if not humanoid or humanoid.Health <= 0 then return false end
        local leftHand = character:FindFirstChild("LeftHand")
        local rightHand = character:FindFirstChild("RightHand")
        return (leftHand ~= nil or rightHand ~= nil)
    end

    local function safeTouchInterest(targetPart, localPart)
        if not targetPart or not targetPart.Parent then return false end
        if not localPart or not localPart.Parent then return false end
        local success = pcall(function()
            firetouchinterest(targetPart, localPart, 0)
            task.wait(0.01)
            firetouchinterest(targetPart, localPart, 1)
        end)
        return success
    end

    if bool then
        task.spawn(function()
            while getgenv().autoWinBrawl and task.wait(0.5) do
                if not getgenv().autoWinBrawl then break end
                pcall(function()
                    if game.Players.LocalPlayer.PlayerGui.gameGui.brawlJoinLabel.Visible then
                        game.ReplicatedStorage.rEvents.brawlEvent:FireServer("joinBrawl")
                        game.Players.LocalPlayer.PlayerGui.gameGui.brawlJoinLabel.Visible = false
                    end
                end)
            end
        end)

        task.spawn(function()
            while getgenv().autoWinBrawl and task.wait(0.5) do
                if not getgenv().autoWinBrawl then break end
                equipPunch()
            end
        end)

        task.spawn(function()
            while getgenv().autoWinBrawl and task.wait(0.1) do
                if not getgenv().autoWinBrawl then break end
                if isLocalPlayerReady() and game.ReplicatedStorage.brawlInProgress.Value then
                    local player = game.Players.LocalPlayer
                    pcall(function() player.muscleEvent:FireServer("punch", "rightHand") end)
                    pcall(function() player.muscleEvent:FireServer("punch", "leftHand") end)
                end
            end
        end)

        task.spawn(function()
            while getgenv().autoWinBrawl and task.wait(0.05) do
                if not getgenv().autoWinBrawl then break end
                if isLocalPlayerReady() and game.ReplicatedStorage.brawlInProgress.Value then
                    local character = game.Players.LocalPlayer.Character
                    local leftHand = character:FindFirstChild("LeftHand")
                    local rightHand = character:FindFirstChild("RightHand")
                    for _, player in pairs(Players:GetPlayers()) do
                        if not getgenv().autoWinBrawl then break end
                        pcall(function()
                            if isValidTarget(player) then
                                local targetRoot = player.Character.HumanoidRootPart
                                if leftHand then
                                    safeTouchInterest(targetRoot, leftHand)
                                end
                                if rightHand then
                                    safeTouchInterest(targetRoot, rightHand)
                                end
                            end
                        end)
                        task.wait(0.01)
                    end
                end
            end
        end)
    end
end)

BrawlFolder:AddSwitch("Auto Join Brawls", function(bool)
    getgenv().autoJoinBrawl = bool
    if bool then
        task.spawn(function()
            while getgenv().autoJoinBrawl and task.wait(0.5) do
                if not getgenv().autoJoinBrawl then break end
                pcall(function()
                    if game.Players.LocalPlayer.PlayerGui.gameGui.brawlJoinLabel.Visible then
                        game.ReplicatedStorage.rEvents.brawlEvent:FireServer("joinBrawl")
                        game.Players.LocalPlayer.PlayerGui.gameGui.brawlJoinLabel.Visible = false
                    end
                end)
            end
        end)
    end
end)

local jungleGymFolder = mainTab:AddFolder("  Jungle Gym")

-- Cache services for faster access
local VIM = game:GetService("VirtualInputManager")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Helper functions for Jungle Gym
local function pressE()
    VIM:SendKeyEvent(true, "E", false, game)
    task.wait(0.1)
    VIM:SendKeyEvent(false, "E", false, game)
end

local function autoLift()
    while getgenv().working do
        LocalPlayer.muscleEvent:FireServer("rep")
        task.wait() -- More efficient than task.wait(0) or task.wait(small number)
    end
end

local function teleportAndStart(machineName, position)
    local character = LocalPlayer.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        character.HumanoidRootPart.CFrame = position
        task.wait(0.1)
        pressE()
        task.spawn(autoLift) -- Use task.spawn to prevent UI freezing
    end
end

-- Jungle Gym Bench Press
jungleGymFolder:AddSwitch("Jungle Bench Press", function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    
    getgenv().working = bool
    if bool then
        teleportAndStart("Bench Press", CFrame.new(-8173, 64, 1898))
    end
end)

-- Jungle Gym Squat
jungleGymFolder:AddSwitch("Jungle Squat", function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    
    getgenv().working = bool
    if bool then
        teleportAndStart("Squat", CFrame.new(-8352, 34, 2878))
    end
end)

-- Jungle Gym Pull Up
jungleGymFolder:AddSwitch("Jungle Pull Ups", function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    
    getgenv().working = bool
    if bool then
        teleportAndStart("Pull Up", CFrame.new(-8666, 34, 2070))
    end
end)

-- Jungle Gym Boulder
jungleGymFolder:AddSwitch("Jungle Boulder", function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    
    getgenv().working = bool
    if bool then
        teleportAndStart("Boulder", CFrame.new(-8621, 34, 2684))
    end
end)

-- NEW: Farm Gyms Folder
local farmGymsFolder = mainTab:AddFolder("  Auto Gyms")

-- Workout positions data
local workoutPositions = {
    ["Bench Press"] = {
        ["Eternal Gym"] = CFrame.new(-7176.19141, 45.394104, -1106.31421),
        ["Legend Gym"] = CFrame.new(4111.91748, 1020.46674, -3799.97217),
        ["Muscle King Gym"] = CFrame.new(-8590.06152, 46.0167427, -6043.34717)
    },
    ["Squat"] = {
        ["Eternal Gym"] = CFrame.new(-7176.19141, 45.394104, -1106.31421),
        ["Legend Gym"] = CFrame.new(4304.99023, 987.829956, -4124.2334),
        ["Muscle King Gym"] = CFrame.new(-8940.12402, 13.1642084, -5699.13477)
    },
    ["Deadlift"] = {
        ["Eternal Gym"] = CFrame.new(-7176.19141, 45.394104, -1106.31421),
        ["Legend Gym"] = CFrame.new(4304.99023, 987.829956, -4124.2334),
        ["Muscle King Gym"] = CFrame.new(-8940.12402, 13.1642084, -5699.13477)
    },
    ["Pull Up"] = {
        ["Eternal Gym"] = CFrame.new(-7176.19141, 45.394104, -1106.31421),
        ["Legend Gym"] = CFrame.new(4304.99023, 987.829956, -4124.2334),
        ["Muscle King Gym"] = CFrame.new(-8940.12402, 13.1642084, -5699.13477)
    }
}

-- Workout types
local workoutTypes = {
    "Bench Press",
    "Squat",
    "Deadlift",
    "Pull Up"
}

-- Gym locations (only the three requested)
local gymLocations = {
    "Eternal Gym",
    "Legend Gym",
    "Muscle King Gym"
}

-- Spanish translations for workout types
local workoutTranslations = {
    ["Bench Press"] = "Bench Press",
    ["Squat"] = "Squat",
    ["Deadlift"] = "Dead Lift",
    ["Pull Up"] = "Pull Up"
}

-- Store references to toggle objects
local gymToggles = {}

-- Create dropdowns and toggles for each workout type
for _, workoutType in ipairs(workoutTypes) do
    -- Create dropdown for gym selection
    local dropdownName = workoutType .. "GymDropdown"
    local spanishWorkoutName = workoutTranslations[workoutType]
    
    -- Create the dropdown with the correct format
    local dropdown = farmGymsFolder:AddDropdown(spanishWorkoutName .. " - Gimnasio", function(selected)
        _G["selected" .. string.gsub(workoutType, " ", "") .. "Gym"] = selected
    end)
    
    -- Add gym locations to the dropdown
    for _, gymName in ipairs(gymLocations) do
        dropdown:Add(gymName)
    end
    
    -- Create toggle for workout
    local toggleName = workoutType .. "GymToggle"
    local toggle = farmGymsFolder:AddSwitch(spanishWorkoutName, function(bool)
        getgenv().workingGym = bool
        getgenv().currentWorkoutType = workoutType
        
        if bool then
            local selectedGym = _G["selected" .. string.gsub(workoutType, " ", "") .. "Gym"] or gymLocations[1]
            
            -- Make sure we have a valid position
            if workoutPositions[workoutType] and workoutPositions[workoutType][selectedGym] then
                -- Stop any other workout that might be running
                for otherType, otherToggle in pairs(gymToggles) do
                    if otherType ~= workoutType and otherToggle then
                        otherToggle:Set(false)
                    end
                end
                
                -- Start the workout
                teleportAndStart(workoutType, workoutPositions[workoutType][selectedGym])
            else
                -- Notify user if position is not found
                game:GetService("StarterGui"):SetCore("SendNotification", {
                    Title = "Error",
                    Text = "Position not found for " .. workoutType .. " in " .. selectedGym,
                    Duration = 5
                })
            end
        end
    end)
    
    -- Store reference to toggle
    gymToggles[workoutType] = toggle
end

local autoSnackFolder = mainTab:AddFolder("  Auto Snacks")

autoSnackFolder:AddLabel("Eat protein")

local autoEatBoostsEnabled = false

local boostsList = {
    "ULTRA Shake",
    "TOUGH Bar",
    "Protein Shake",
    "Energy Shake",
    "Protein Bar",
    "Energy Bar",
    "Tropical Shake"
}

local function eatAllBoosts()
    local player = game.Players.LocalPlayer
    local backpack = player:WaitForChild("Backpack")
    local character = player.Character or player.CharacterAdded:Wait()

    for _, boostName in ipairs(boostsList) do
        local boost = backpack:FindFirstChild(boostName)
        while boost do
            boost.Parent = character
            pcall(function()
                boost:Activate()
            end)
            task.wait(0)
            boost = backpack:FindFirstChild(boostName)
        end
    end
end

task.spawn(function()
    while true do
        if autoEatBoostsEnabled then
            eatAllBoosts()
            task.wait(2)
        else
            task.wait(1)
        end
    end
end)

autoSnackFolder:AddSwitch("Auto Clear Inventory", function(state)
    autoEatBoostsEnabled = state
end)

autoSnackFolder:AddLabel("Protein Shake")
autoSnackFolder:AddLabel("Energy Shake")
autoSnackFolder:AddLabel("Tough Bar")
autoSnackFolder:AddLabel("Ultra Shake")
autoSnackFolder:AddLabel("Protein Bar")
autoSnackFolder:AddLabel("Energy Bar")
autoSnackFolder:AddLabel("Tropical Shake")
autoSnackFolder:AddLabel("Successful cleaning")
autoSnackFolder:AddLabel("")
autoSnackFolder:AddLabel("AUTO EGG OP")

local autoEatEnabled = false

local function eatProteinEgg()
    local player = game.Players.LocalPlayer
    local backpack = player:WaitForChild("Backpack")
    local character = player.Character or player.CharacterAdded:Wait()

    local egg = backpack:FindFirstChild("Protein Egg")
    if egg then
        egg.Parent = character
        pcall(function()
            egg:Activate()
        end)
    end
end

task.spawn(function()
    while true do
        if autoEatEnabled then
            eatProteinEgg()
            task.wait(1800)
        else
            task.wait(1)
        end
    end
end)

autoSnackFolder:AddSwitch("Auto Eat Egg 30 Minuts", function(state)
    autoEatEnabled = state
end)

local opThingsFolder = mainTab:AddFolder("OP Things/Farms")

local switch = opThingsFolder:AddSwitch("Lock Position", function(Value)
    if Value then
        
        local currentPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
        getgenv().posLock = game:GetService("RunService").Heartbeat:Connect(function()
            if game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = currentPos
            end
        end)
    else
        
        if getgenv().posLock then
            getgenv().posLock:Disconnect()
            getgenv().posLock = nil
        end
    end
end)

-- Anti Knockback Toggle
opThingsFolder:AddSwitch("Anti Knockback", function(Value)
    if Value then
        local playerName = game.Players.LocalPlayer.Name
        local rootPart = game.Workspace:FindFirstChild(playerName):FindFirstChild("HumanoidRootPart")
        local bodyVelocity = Instance.new("BodyVelocity")
        bodyVelocity.MaxForce = Vector3.new(100000, 0, 100000)
        bodyVelocity.Velocity = Vector3.new(0, 0, 0)
        bodyVelocity.P = 1250
        bodyVelocity.Parent = rootPart
    else
        local playerName = game.Players.LocalPlayer.Name
        local rootPart = game.Workspace:FindFirstChild(playerName):FindFirstChild("HumanoidRootPart")
        local existingVelocity = rootPart:FindFirstChild("BodyVelocity")
        if existingVelocity and existingVelocity.MaxForce == Vector3.new(100000, 0, 100000) then
            existingVelocity:Destroy()
        end
    end
end)

-- Anti AFK Button
opThingsFolder:AddButton("Anti AFK", function()
    -- Anti AFK implementation
    local GC = getconnections or get_signal_cons
    if GC then
        for i, v in pairs(GC(game.Players.LocalPlayer.Idled)) do
            if v["Disable"] then
                v["Disable"](v)
            elseif v["Disconnect"] then
                v["Disconnect"](v)
            end
        end
    else
        -- Fallback method if getconnections isn't available
        local VirtualUser = game:GetService("VirtualUser")
        game:GetService("Players").LocalPlayer.Idled:Connect(function()
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new())
        end)
    end
    
    -- Notify user
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Anti AFK",
        Text = "Anti AFK has been enabled!",
        Duration = 5
    })
    
    -- Additional periodic movement to prevent AFK
    spawn(function()
        while wait(30) do
            local VirtualUser = game:GetService("VirtualUser")
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new())
        end
    end)
end)

local autoRockFolder = farmTab:AddFolder("  Auto Rocks")

function gettool()
    for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
        if v.Name == "Punch" and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
        end
    end
    game:GetService("Players").LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
    game:GetService("Players").LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
end

autoRockFolder:AddSwitch("Tiny Rock", function(Value)
    selectrock = "Tiny Island Rock"
    getgenv().autoFarm = Value
    
    task.spawn(function()
        while getgenv().autoFarm do
            task.wait()
            if not getgenv().autoFarm then break end
            
            if game:GetService("Players").LocalPlayer.Durability.Value >= 0 then
                for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
                    if v.Name == "neededDurability" and v.Value == 0 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
                        gettool()
                    end
                end
            end
        end
    end)
end)

autoRockFolder:AddSwitch("Starter Rock", function(Value)
    selectrock = "Starter Island Rock"
    getgenv().autoFarm = Value
    
    task.spawn(function()
        while getgenv().autoFarm do
            task.wait()
            if not getgenv().autoFarm then break end
            
            if game:GetService("Players").LocalPlayer.Durability.Value >= 100 then
                for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
                    if v.Name == "neededDurability" and v.Value == 100 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
                        gettool()
                    end
                end
            end
        end
    end)
end)

autoRockFolder:AddSwitch("Legend Beach Rock", function(Value)
    selectrock = "Legend Beach Rock"
    getgenv().autoFarm = Value
    
    task.spawn(function()
        while getgenv().autoFarm do
            task.wait()
            if not getgenv().autoFarm then break end
            
            if game:GetService("Players").LocalPlayer.Durability.Value >= 5000 then
                for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
                    if v.Name == "neededDurability" and v.Value == 5000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
                        gettool()
                    end
                end
            end
        end
    end)
end)

autoRockFolder:AddSwitch("Frozen Rock", function(Value)
    selectrock = "Frost Gym Rock"
    getgenv().autoFarm = Value
    
    task.spawn(function()
        while getgenv().autoFarm do
            task.wait()
            if not getgenv().autoFarm then break end
            
            if game:GetService("Players").LocalPlayer.Durability.Value >= 150000 then
                for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
                    if v.Name == "neededDurability" and v.Value == 150000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
                        gettool()
                    end
                end
            end
        end
    end)
end)

autoRockFolder:AddSwitch("Mythical Rock", function(Value)
    selectrock = "Mythical Gym Rock"
    getgenv().autoFarm = Value
    
    task.spawn(function()
        while getgenv().autoFarm do
            task.wait()
            if not getgenv().autoFarm then break end
            
            if game:GetService("Players").LocalPlayer.Durability.Value >= 400000 then
                for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
                    if v.Name == "neededDurability" and v.Value == 400000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
                        gettool()
                    end
                end
            end
        end
    end)
end)

autoRockFolder:AddSwitch("Eternal Rock", function(Value)
    selectrock = "Eternal Gym Rock"
    getgenv().autoFarm = Value
    
    task.spawn(function()
        while getgenv().autoFarm do
            task.wait()
            if not getgenv().autoFarm then break end
            
            if game:GetService("Players").LocalPlayer.Durability.Value >= 750000 then
                for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
                    if v.Name == "neededDurability" and v.Value == 750000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
                        gettool()
                    end
                end
            end
        end
    end)
end)

autoRockFolder:AddSwitch("Legend Rock", function(Value)
    selectrock = "Legend Gym Rock"
    getgenv().autoFarm = Value
    
    task.spawn(function()
        while getgenv().autoFarm do
            task.wait()
            if not getgenv().autoFarm then break end
            
            if game:GetService("Players").LocalPlayer.Durability.Value >= 1000000 then
                for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
                    if v.Name == "neededDurability" and v.Value == 1000000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
                        gettool()
                    end
                end
            end
        end
    end)
end)

autoRockFolder:AddSwitch("Muscle King Rock", function(Value)
    selectrock = "Muscle King Gym Rock"
    getgenv().autoFarm = Value
    
    task.spawn(function()
        while getgenv().autoFarm do
            task.wait()
            if not getgenv().autoFarm then break end
            
            if game:GetService("Players").LocalPlayer.Durability.Value >= 5000000 then
                for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
                    if v.Name == "neededDurability" and v.Value == 5000000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
                        gettool()
                    end
                end
            end
        end
    end)
end)

autoRockFolder:AddSwitch("Jungle Rock", function(Value)
    selectrock = "Ancient Jungle Rock"
    getgenv().autoFarm = Value
    
    task.spawn(function()
        while getgenv().autoFarm do
            task.wait()
            if not getgenv().autoFarm then break end
            
            if game:GetService("Players").LocalPlayer.Durability.Value >= 10000000 then
                for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
                    if v.Name == "neededDurability" and v.Value == 10000000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
                        firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
                        gettool()
                    end
                end
            end
        end
    end)
end)

local autoEquipToolsFolder = farmTab:AddFolder("  Auto Equip Tools")

-- Free AutoLift Gamepass Button
autoEquipToolsFolder:AddButton("Gamepass AutoLift", function()
    local gamepassFolder = game:GetService("ReplicatedStorage").gamepassIds
    local player = game:GetService("Players").LocalPlayer
    for _, gamepass in pairs(gamepassFolder:GetChildren()) do
        local value = Instance.new("IntValue")
        value.Name = gamepass.Name
        value.Value = gamepass.Value
        value.Parent = player.ownedGamepasses
    end
end, "Desbloquea el gamepass de AutoLift gratis")

-- Auto Weight Toggle
autoEquipToolsFolder:AddSwitch("Auto Weight", function(Value)
    _G.AutoWeight = Value
    
    if Value then
        local weightTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Weight")
        if weightTool then
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(weightTool)
        end
    else
        local character = game.Players.LocalPlayer.Character
        local equipped = character:FindFirstChild("Weight")
        if equipped then
            equipped.Parent = game.Players.LocalPlayer.Backpack
        end
    end
    
    task.spawn(function()
        while _G.AutoWeight do
            if not _G.AutoWeight then break end
            game:GetService("Players").LocalPlayer.muscleEvent:FireServer("rep")
            task.wait(0.1)
        end
    end)
end, "Levanta pesas automáticamente")

-- Auto Pushups Toggle
autoEquipToolsFolder:AddSwitch("Auto Pushups", function(Value)
    _G.AutoPushups = Value
    
    if Value then
        local pushupsTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Pushups")
        if pushupsTool then
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(pushupsTool)
        end
    else
        local character = game.Players.LocalPlayer.Character
        local equipped = character:FindFirstChild("Pushups")
        if equipped then
            equipped.Parent = game.Players.LocalPlayer.Backpack
        end
    end
    
    task.spawn(function()
        while _G.AutoPushups do
            if not _G.AutoPushups then break end
            game:GetService("Players").LocalPlayer.muscleEvent:FireServer("rep")
            task.wait(0.1)
        end
    end)
end, "Haz flexiones automáticamente")

-- Auto Handstands Toggle
autoEquipToolsFolder:AddSwitch("Auto Handstands", function(Value)
    _G.AutoHandstands = Value
    
    if Value then
        local handstandsTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Handstands")
        if handstandsTool then
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(handstandsTool)
        end
    else
        local character = game.Players.LocalPlayer.Character
        local equipped = character:FindFirstChild("Handstands")
        if equipped then
            equipped.Parent = game.Players.LocalPlayer.Backpack
        end
    end
    
    task.spawn(function()
        while _G.AutoHandstands do
            if not _G.AutoHandstands then break end
            game:GetService("Players").LocalPlayer.muscleEvent:FireServer("rep")
            task.wait(0.1)
        end
    end)
end, "Haz paradas de manos automáticamente")

-- Auto Situps Toggle
autoEquipToolsFolder:AddSwitch("Auto Situps", function(Value)
    _G.AutoSitups = Value
    
    if Value then
        local situpsTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Situps")
        if situpsTool then
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(situpsTool)
        end
    else
        local character = game.Players.LocalPlayer.Character
        local equipped = character:FindFirstChild("Situps")
        if equipped then
            equipped.Parent = game.Players.LocalPlayer.Backpack
        end
    end
    
    task.spawn(function()
        while _G.AutoSitups do
            if not _G.AutoSitups then break end
            game:GetService("Players").LocalPlayer.muscleEvent:FireServer("rep")
            task.wait(0.1)
        end
    end)
end, "Haz abdominales automáticamente")

-- Auto Punch Toggle
autoEquipToolsFolder:AddSwitch("Auto Punch", function(Value)
    _G.fastHitActive = Value
    
    if Value then
        -- Function to equip and modify punch
        task.spawn(function()
            while _G.fastHitActive do
                if not _G.fastHitActive then break end
                
                local player = game.Players.LocalPlayer
                local punch = player.Backpack:FindFirstChild("Punch")
                if punch then
                    punch.Parent = player.Character
                    if punch:FindFirstChild("attackTime") then
                        punch.attackTime.Value = 0
                    end
                end
                task.wait(0.1)
            end
        end)
        
        -- Function for rapid punching
        task.spawn(function()
            while _G.fastHitActive do
                if not _G.fastHitActive then break end
                
                local player = game.Players.LocalPlayer
                player.muscleEvent:FireServer("punch", "rightHand")
                player.muscleEvent:FireServer("punch", "leftHand")
                
                local character = player.Character
                if character then
                    local punchTool = character:FindFirstChild("Punch")
                    if punchTool then
                        punchTool:Activate()
                    end
                end
                task.wait(0)
            end
        end)
    else
        local character = game.Players.LocalPlayer.Character
        local equipped = character:FindFirstChild("Punch")
        if equipped then
            equipped.Parent = game.Players.LocalPlayer.Backpack
        end
    end
end, "Golpea automáticamente")

-- Fast Tools Toggle
autoEquipToolsFolder:AddSwitch("Fast Tools", function(Value)
    _G.FastTools = Value
    
    local defaultSpeeds = {
        {
            "Punch",
            "attackTime",
            Value and 0 or 0.35
        },
        {
            "Ground Slam",
            "attackTime",
            Value and 0 or 6
        },
        {
            "Stomp",
            "attackTime",
            Value and 0 or 7
        },
        {
            "Handstands",
            "repTime",
            Value and 0 or 1
        },
        {
            "Pushups",
            "repTime",
            Value and 0 or 1
        },
        {
            "Weight",
            "repTime",
            Value and 0 or 1
        },
        {
            "Situps",
            "repTime",
            Value and 0 or 1
        }
    }
    
    local player = game.Players.LocalPlayer
    local backpack = player:WaitForChild("Backpack")
    
    for _, toolInfo in ipairs(defaultSpeeds) do
        local tool = backpack:FindFirstChild(toolInfo[1])
        if tool and tool:FindFirstChild(toolInfo[2]) then
            tool[toolInfo[2]].Value = toolInfo[3]
        end
        
        local equippedTool = player.Character and player.Character:FindFirstChild(toolInfo[1])
        if equippedTool and equippedTool:FindFirstChild(toolInfo[2]) then
            equippedTool[toolInfo[2]].Value = toolInfo[3]
        end
    end
end, "Acelera todas las herramientas")

local rebirthsFolder = farmTab:AddFolder("  Auto Rebirths")

-- Target rebirth input - direct text input
rebirthsFolder:AddTextBox("Rebirth Target", function(text)
    local newValue = tonumber(text)
    if newValue and newValue > 0 then
        targetRebirthValue = newValue
        updateStats() -- Call the stats update function
        
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Objetivo Actualizado",
            Text = "Nuevo objetivo: " .. tostring(targetRebirthValue) .. " renacimientos",
            Duration = 0
        })
    else
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Entrada Inválida",
            Text = "Por favor ingresa un número válido mayor que 0",
            Duration = 0
        })
    end
end)

-- Create toggle switches
local infiniteSwitch -- Forward declaration

local targetSwitch = rebirthsFolder:AddSwitch("Auto Rebirth Target", function(bool)
    _G.targetRebirthActive = bool
    
    if bool then
        -- Turn off infinite rebirth if it's on
        if _G.infiniteRebirthActive and infiniteSwitch then
            infiniteSwitch:Set(false)
            _G.infiniteRebirthActive = false
        end
        
        -- Start target rebirth loop
        spawn(function()
            while _G.targetRebirthActive and wait(0.1) do
                local currentRebirths = game.Players.LocalPlayer.leaderstats.Rebirths.Value
                
                if currentRebirths >= targetRebirthValue then
                    targetSwitch:Set(false)
                    _G.targetRebirthActive = false
                    
                    game:GetService("StarterGui"):SetCore("SendNotification", {
                        Title = "¡Objetivo Alcanzado!",
                        Text = "Has alcanzado " .. tostring(targetRebirthValue) .. " renacimientos",
                        Duration = 5
                    })
                    
                    break
                end
                
                game:GetService("ReplicatedStorage").rEvents.rebirthRemote:InvokeServer("rebirthRequest")
            end
        end)
    end
end, "Renacimiento automático hasta alcanzar el objetivo")

infiniteSwitch = rebirthsFolder:AddSwitch("Auto Rebirth (Infinite)", function(bool)
    _G.infiniteRebirthActive = bool
    
    if bool then
        -- Turn off target rebirth if it's on
        if _G.targetRebirthActive and targetSwitch then
            targetSwitch:Set(false)
            _G.targetRebirthActive = false
        end
        
        -- Start infinite rebirth loop
        spawn(function()
            while _G.infiniteRebirthActive and wait(0.1) do
                game:GetService("ReplicatedStorage").rEvents.rebirthRemote:InvokeServer("rebirthRequest")
            end
        end)
    end
end, "Renacimiento continuo sin parar")

local sizeSwitch = rebirthsFolder:AddSwitch("Auto Size 1", function(bool)
    _G.autoSizeActive = bool
    
    if bool then
        spawn(function()
            while _G.autoSizeActive and wait() do
                game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", 1)
            end
        end)
    end
end, "Establece el tamaño del personaje a 1 continuamente")

local teleportSwitch = rebirthsFolder:AddSwitch("Auto Teleport to Muscle King", function(bool)
    _G.teleportActive = bool
    
    if bool then
        spawn(function()
            while _G.teleportActive and wait() do
                if game.Players.LocalPlayer.Character then
                    game.Players.LocalPlayer.Character:MoveTo(Vector3.new(-8646, 17, -5738))
                end
            end
        end)
    end
end, "Teletransporte continuo al Rey Músculo")

-- Misc 1 Folder
local misc1Folder = miscTab:AddFolder("  Misc 1")

local sizeValue = 2
local speedValue = 16
local autoSizeEnabled = false
local autoSpeedEnabled = false
local autoSizeConnection = nil
local autoSpeedConnection = nil

misc1Folder:AddTextBox("Auto Size", function(text)
    sizeValue = tonumber(text) or 2

    if autoSizeEnabled then
        safeCall(function()
            game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", sizeValue)
        end)
    end
end)

misc1Folder:AddSwitch("Auto Set Size", function(bool)
    autoSizeEnabled = bool

    if autoSizeEnabled then
        spawn(function()
            while autoSizeEnabled do
                safeCall(function()
                    game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", sizeValue)
                end)
                wait(0.1)
            end
        end)
    end
end)

misc1Folder:AddTextBox("Auto Speed", function(text)
    speedValue = tonumber(text) or 16

    if player and player.Character and player.Character:FindFirstChild("Humanoid") then
        player.Character.Humanoid.WalkSpeed = speedValue
    end
end)

misc1Folder:AddSwitch("Auto Set Speed", function(bool)
    autoSpeedEnabled = bool

    if autoSpeedEnabled then
        if player and player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.WalkSpeed = speedValue
        end

        if autoSpeedConnection then
            autoSpeedConnection:Disconnect()
        end

        autoSpeedConnection = player.CharacterAdded:Connect(function(character)
            local humanoid = character:WaitForChild("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = speedValue
            end
        end)
    else
        if autoSpeedConnection then
            autoSpeedConnection:Disconnect()
            autoSpeedConnection = nil
        end
    end
end)

-- Misc 2 Folder
local Misc2 = miscTab:AddFolder("  Misc 2")

Misc2:AddButton("Infinite Yield", function()
    safeCall(function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
    end)
end)

Misc2:AddButton("GhostX Hub", function()
    safeCall(function()
        loadstring(game:HttpGet("https://scriptblox.com/raw/Universal-Script-GhostX-Hub-7158"))()
    end)
end)

-- Misc 3 Folder
local misc3Folder = miscTab:AddFolder("  Misc 3")

misc3Folder:AddSwitch("No-Clip", function(bool)
    _G.NoClip = bool
    
    if bool then
        local noclipLoop
        noclipLoop = game:GetService("RunService").Stepped:Connect(function()
            if _G.NoClip then
                safeCall(function()
                    for _, part in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                        if part:IsA("BasePart") and part.CanCollide then
                            part.CanCollide = false
                        end
                    end
                end)
            else
                noclipLoop:Disconnect()
            end
        end)
        
        safeCall(function()
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "No-Clip Activado",
                Text = "Ahora puedes atravesar objetos",
                Duration = 3
            })
        end)
    end
end)

misc3Folder:AddSwitch("Jump Infinite", function(bool)
    _G.InfiniteJump = bool
    
    if bool then
        local InfiniteJumpConnection
        InfiniteJumpConnection = game:GetService("UserInputService").JumpRequest:Connect(function()
            if _G.InfiniteJump then
                safeCall(function()
                    game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping")
                end)
            else
                InfiniteJumpConnection:Disconnect()
            end
        end)
        
        safeCall(function()
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Salto Infinito Activado",
                Text = "Ahora puedes saltar sin límites",
                Duration = 3
            })
        end)
    end
end)

local timeDropdown = misc3Folder:AddDropdown("Change Time", function(selection)
    safeCall(function()
        local lighting = game:GetService("Lighting")
        
        if selection == "Night" then
            lighting.ClockTime = 0
        elseif selection == "Day" then
            lighting.ClockTime = 12
        elseif selection == "Midnight" then
            lighting.ClockTime = 6
        end
        
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Time Changed",
            Text = "Time has been changed to: " .. selection,
            Duration = 3
        })
    end)
end)

timeDropdown:Add("Night")
timeDropdown:Add("Day")
timeDropdown:Add("Midnight")

-- Misc 4 Folder
local misc4Folder = miscTab:AddFolder("  Misc 4")

misc4Folder:AddSwitch("Disable Trade", function(State)
    safeCall(function()
        if State then
            game:GetService("ReplicatedStorage").rEvents.tradingEvent:FireServer("disableTrading")
        else
            game:GetService("ReplicatedStorage").rEvents.tradingEvent:FireServer("enableTrading")
        end
    end)
end)

misc4Folder:AddSwitch("Hide Pets", function(State)
    safeCall(function()
        if State then
            game:GetService("ReplicatedStorage").rEvents.showPetsEvent:FireServer("hidePets")
        else
            game:GetService("ReplicatedStorage").rEvents.showPetsEvent:FireServer("showPets")
        end
    end)
end)

local misc5Folder = miscTab:AddFolder("  Misc 5")

misc5Folder:AddButton("Remove Portals", function()
    -- Remove existing ad portals
    for _, portal in pairs(game:GetDescendants()) do
        if portal.Name == "RobloxForwardPortals" then
            portal:Destroy()
        end
    end
    
    -- Set up connection to remove future ad portals
    if _G.AdRemovalConnection then
        _G.AdRemovalConnection:Disconnect()
    end
    
    _G.AdRemovalConnection = game.DescendantAdded:Connect(function(descendant)
        if descendant.Name == "RobloxForwardPortals" then
            descendant:Destroy()
        end
    end)
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Anuncios Eliminados",
        Text = "Los anuncios de Roblox han sido eliminados",
        Duration = 0
    })
end)

-- Add Auto Spin Wheel toggle
misc5Folder:AddSwitch("Auto Spin Wheel", function(bool)
    _G.AutoSpinWheel = bool
    
    if bool then
        spawn(function()
            while _G.AutoSpinWheel and wait(1) do
                game:GetService("ReplicatedStorage").rEvents.openFortuneWheelRemote:InvokeServer("openFortuneWheel", game:GetService("ReplicatedStorage").fortuneWheelChances["Fortune Wheel"])
            end
        end)
    end
end)

local parts = {}
local partSize = 2048
local totalDistance = 50000
local startPosition = Vector3.new(-2, -9.5, -2)
local numberOfParts = math.ceil(totalDistance / partSize)

local function createParts()
    for x = 0, numberOfParts - 1 do
        for z = 0, numberOfParts - 1 do
            local newPartSide = Instance.new("Part")
            newPartSide.Size = Vector3.new(partSize, 1, partSize)
            newPartSide.Position = startPosition + Vector3.new(x * partSize, 0, z * partSize)
            newPartSide.Anchored = true
            newPartSide.Transparency = 1
            newPartSide.CanCollide = true
            newPartSide.Name = "Part_Side_" .. x .. "_" .. z
            newPartSide.Parent = workspace
            table.insert(parts, newPartSide)
            
            local newPartLeftRight = Instance.new("Part")
            newPartLeftRight.Size = Vector3.new(partSize, 1, partSize)
            newPartLeftRight.Position = startPosition + Vector3.new(-x * partSize, 0, z * partSize)
            newPartLeftRight.Anchored = true
            newPartLeftRight.Transparency = 1
            newPartLeftRight.CanCollide = true
            newPartLeftRight.Name = "Part_LeftRight_" .. x .. "_" .. z
            newPartLeftRight.Parent = workspace
            table.insert(parts, newPartLeftRight)
            
            local newPartUpLeft = Instance.new("Part")
            newPartUpLeft.Size = Vector3.new(partSize, 1, partSize)
            newPartUpLeft.Position = startPosition + Vector3.new(-x * partSize, 0, -z * partSize)
            newPartUpLeft.Anchored = true
            newPartUpLeft.Transparency = 1
            newPartUpLeft.CanCollide = true
            newPartUpLeft.Name = "Part_UpLeft_" .. x .. "_" .. z
            newPartUpLeft.Parent = workspace
            table.insert(parts, newPartUpLeft)
            
            local newPartUpRight = Instance.new("Part")
            newPartUpRight.Size = Vector3.new(partSize, 1, partSize)
            newPartUpRight.Position = startPosition + Vector3.new(x * partSize, 0, -z * partSize)
            newPartUpRight.Anchored = true
            newPartUpRight.Transparency = 1
            newPartUpRight.CanCollide = true
            newPartUpRight.Name = "Part_UpRight_" .. x .. "_" .. z
            newPartUpRight.Parent = workspace
            table.insert(parts, newPartUpRight)
        end
    end
end

local function makePartsWalkthrough()
    for _, part in ipairs(parts) do
        if part and part.Parent then
            part.CanCollide = false
        end
    end
end

local function makePartsSolid()
    for _, part in ipairs(parts) do
        if part and part.Parent then
            part.CanCollide = true
        end
    end
end

misc5Folder:AddSwitch("Full Walk on Water", function(bool)
    if bool then
        createParts()
    else
        makePartsWalkthrough()
    end
end)

local crystalData = {
    ["Blue Crystal"] = {
        {name = "Blue Birdie", rarity = "Basic"},
        {name = "Orange Hedgehog", rarity = "Basic"},
        {name = "Blue Aura", rarity = "Basic"},
        {name = "Red Kitty", rarity = "Basic"},
        {name = "Dark Vampy", rarity = "Advanced"},
        {name = "Blue Bunny", rarity = "Basic"},
        {name = "Red Aura", rarity = "Basic"},
        {name = "Green Aura", rarity = "Basic"},
        {name = "Purple Aura", rarity = "Basic"},
        {name = "Yellow Aura", rarity = "Basic"}
    },
    ["Green Crystal"] = {
        {name = "Silver Dog", rarity = "Basic"},
        {name = "Green Aura", rarity = "Advanced"},
        {name = "Dark Golem", rarity = "Advanced"},
        {name = "Green Butterfly", rarity = "Advanced"},
        {name = "Crimson Falcon", rarity = "Rare"},
        {name = "Red Aura", rarity = "Basic"},
        {name = "Blue Aura", rarity = "Basic"},
        {name = "Purple Aura", rarity = "Basic"},
        {name = "Yellow Aura", rarity = "Basic"}
    },
    ["Frost Crystal"] = {
        {name = "Yellow Butterfly", rarity = "Advanced"},
        {name = "Purple Dragon", rarity = "Rare"},
        {name = "Blue Pheonix", rarity = "Epic"},
        {name = "Orange Pegasus", rarity = "Rare"},
        {name = "Lightning", rarity = "Rare"},
        {name = "Electro", rarity = "Advanced"}
    },
    ["Mythical Crystal"] = {
        {name = "Purple Falcon", rarity = "Rare"},
        {name = "Red Dragon", rarity = "Rare"},
        {name = "Blue Firecaster", rarity = "Epic"},
        {name = "Golden Pheonix", rarity = "Epic"},
        {name = "Power Lightning", rarity = "Rare"},
        {name = "Dark Lightning", rarity = "Epic"}
    },
    ["Inferno Crystal"] = {
        {name = "Red Firecaster", rarity = "Epic"},
        {name = "Infernal Dragon", rarity = "Unique"},
        {name = "White Pegasus", rarity = "Rare"},
        {name = "Golden Pheonix", rarity = "Epic"},
        {name = "Inferno", rarity = "Epic"},
        {name = "Dark Storm", rarity = "Unique"}
    },
    ["Legends Crystal"] = {
        {name = "Ultra Birdie", rarity = "Unique"},
        {name = "Magic Butterfly", rarity = "Unique"},
        {name = "Green Firecaster", rarity = "Epic"},
        {name = "White Pheonix", rarity = "Epic"},
        {name = "Supernova", rarity = "Epic"},
        {name = "Purple Nova", rarity = "Unique"}
    },
    ["Muscle Elite Crystal"] = {
        {name = "Frostwave Legends Penguin", rarity = "Rare"},
        {name = "Phantom Genesis Dragon", rarity = "Rare"},
        {name = "Dark Legends Manticore", rarity = "Epic"},
        {name = "Ultimate Supernova Pegasus", rarity = "Epic"},
        {name = "Aether Spirit Bunny", rarity = "Unique"},
        {name = "Cybernetic Showdown Dragon", rarity = "Unique"}
    },
    ["Galaxy Oracle Crystal"] = {
        {name = "Eternal Strike Leviathan", rarity = "Rare"},
        {name = "Lightning Strike Phantom", rarity = "Epic"},
        {name = "Darkstar Hunter", rarity = "Unique"},
        {name = "Muscle King", rarity = "Unique"},
        {name = "Azure Tundra", rarity = "Epic"},
        {name = "Ultra Inferno", rarity = "Rare"}
    },
    ["Jungle Crystal"] = {
        {name = "Entropic Blast", rarity = "Unique"},
        {name = "Muscle Sensei", rarity = "Unique"},
        {name = "Grand Supernova", rarity = "Epic"},
        {name = "Neon Guardian", rarity = "Unique"},
        {name = "Eternal Megastrike", rarity = "Unique"},
        {name = "Golden Viking", rarity = "Epic"},
        {name = "Astral Electro", rarity = "Epic"},
        {name = "Dark Electro", rarity = "Epic"},
        {name = "Enchanted Mirage", rarity = "Epic"},
        {name = "Ultra Mirage", rarity = "Unique"},
        {name = "Unstable Mirage", rarity = "Unique"}
    }
}

-- Function to find which crystal contains a specific pet/aura
local function findCrystalForItem(itemName)
    for crystalName, pets in pairs(crystalData) do
        for _, pet in ipairs(pets) do
            if pet.name == itemName then
                return crystalName
            end
        end
    end
    return nil
end

-- Variables to track current selections
local selectedPet = ""
local selectedAura = ""

pets:AddLabel("=== Pet & Aura Auto Buy ===")

-- Pet dropdown
local petDropdown = pets:AddDropdown("Select Pet", function(text)
    selectedPet = text
    local crystal = findCrystalForItem(text)
    print("Pet selected: " .. text .. " (Found in: " .. (crystal or "Unknown") .. ")")
end)

-- Add pets sorted by rarity
local petOptions = {
    "Blue Birdie", "Orange Hedgehog", "Red Kitty", "Blue Bunny", "Silver Dog",
    "Dark Vampy", "Dark Golem", "Green Butterfly", "Yellow Butterfly",
    "Crimson Falcon", "Purple Dragon", "Orange Pegasus", "Purple Falcon", 
    "Red Dragon", "White Pegasus", "Frostwave Legends Penguin", "Phantom Genesis Dragon", 
    "Eternal Strike Leviathan", "Blue Pheonix", "Blue Firecaster", "Golden Pheonix", 
    "Red Firecaster", "Green Firecaster", "White Pheonix", "Dark Legends Manticore", 
    "Ultimate Supernova Pegasus", "Lightning Strike Phantom", "Golden Viking",
    "Infernal Dragon", "Ultra Birdie", "Magic Butterfly", "Aether Spirit Bunny", 
    "Cybernetic Showdown Dragon", "Darkstar Hunter", "Muscle Sensei", "Neon Guardian"
}

for _, pet in ipairs(petOptions) do
    petDropdown:Add(pet)
end

-- Aura dropdown
local auraDropdown = pets:AddDropdown("Select Aura", function(text)
    selectedAura = text
    local crystal = findCrystalForItem(text)
    print("Aura selected: " .. text .. " (Found in: " .. (crystal or "Unknown") .. ")")
end)

local auraOptions = {
    "Blue Aura", "Green Aura", "Purple Aura", "Red Aura", "Yellow Aura",
    "Ultra Inferno", "Azure Tundra", "Grand Supernova", "Muscle King", 
    "Entropic Blast", "Eternal Megastrike"
}

for _, aura in ipairs(auraOptions) do
    auraDropdown:Add(aura)
end

pets:AddLabel("=== Auto Buy Controls ===")

-- Auto buy pet toggle
pets:AddSwitch("Auto Buy Pet", function(bool)
    _G.AutoBuyPet = bool
    
    if bool then
        if selectedPet == "" then
            print("Please select a pet first!")
            return
        end
        
        print("Auto buy pet started for: " .. selectedPet)
        spawn(function()
            while _G.AutoBuyPet and selectedPet ~= "" do
                local petToBuy = ReplicatedStorage.cPetShopFolder:FindFirstChild(selectedPet)
                if petToBuy then
                    safeCall(function()
                        ReplicatedStorage.cPetShopRemote:InvokeServer(petToBuy)
                    end)
                    print("Bought pet: " .. selectedPet)
                else
                    print("Pet not found: " .. selectedPet)
                end
                task.wait(1)
            end
        end)
    else
        print("Auto buy pet stopped")
    end
end)

-- Auto buy aura toggle
pets:AddSwitch("Auto Buy Aura", function(bool)
    _G.AutoBuyAura = bool
    
    if bool then
        if selectedAura == "" then
            print("Please select an aura first!")
            return
        end
        
        print("Auto buy aura started for: " .. selectedAura)
        spawn(function()
            while _G.AutoBuyAura and selectedAura ~= "" do
                local auraToBuy = ReplicatedStorage.cPetShopFolder:FindFirstChild(selectedAura)
                if auraToBuy then
                    safeCall(function()
                        ReplicatedStorage.cPetShopRemote:InvokeServer(auraToBuy)
                    end)
                    print("Bought aura: " .. selectedAura)
                else
                    print("Aura not found: " .. selectedAura)
                end
                task.wait(1)
            end
        end)
    else
        print("Auto buy aura stopped")
    end
end)

pets:AddLabel("=== Ultimate Upgrades ===")

-- Ultimate options
local ultimateOptions = {
    "+1 Daily Spin",
    "+1 Pet Slot",
    "+10 Item Capacity",
    "+5% Rep Speed",
    "Demon Damage",
    "Galaxy Gains",
    "Golden Rebirth",
    "Jungle Swift",
    "Muscle Mind",
    "x2 Chest Rewards",
    "x2 Quest Rewards"
}

-- Variable to track selected ultimate
local selectedUltimate = ""

-- Ultimate dropdown
local ultimateDropdown = pets:AddDropdown("Select Ultimate", function(text)
    selectedUltimate = text
    print("Ultimate selected: " .. text)
end)

-- Add all ultimate options to dropdown
for _, ultimate in ipairs(ultimateOptions) do
    ultimateDropdown:Add(ultimate)
end

-- Auto upgrade ultimate toggle
pets:AddSwitch("Auto Upgrade Ultimate", function(bool)
    _G.AutoUpgradeUltimate = bool
    
    if bool then
        if selectedUltimate == "" then
            print("Please select an ultimate first!")
            return
        end
        
        print("Auto upgrade ultimate started for: " .. selectedUltimate)
        spawn(function()
            while _G.AutoUpgradeUltimate and selectedUltimate ~= "" do
                safeCall(function()
                    game:GetService("ReplicatedStorage").rEvents.ultimatesRemote:InvokeServer(
                        "upgradeUltimate",
                        selectedUltimate
                    )
                end)
                print("Upgraded ultimate: " .. selectedUltimate)
                task.wait(1)
            end
        end)
    else
        print("Auto upgrade ultimate stopped")
    end
end)

-- Inicializar variables de seguimiento
local sessionStartTime = os.time()
local sessionStartStrength = 0
local sessionStartDurability = 0
local sessionStartKills = 0
local sessionStartRebirths = 0
local sessionStartBrawls = 0
local hasStartedTracking = false

-- Crear una carpeta en farmPlusTab para estadísticas
local statsFolder = Stats:AddFolder("Stats")

-- Crear etiquetas para las estadísticas solicitadas
statsFolder:AddLabel("Strength")
local strengthStatsLabel = statsFolder:AddLabel("Actual: Waiting...")
local strengthGainLabel = statsFolder:AddLabel("Gained: 0")

statsFolder:AddLabel("Durability")
local durabilityStatsLabel = statsFolder:AddLabel("Actual: Waiting...")
local durabilityGainLabel = statsFolder:AddLabel("Gained: 0")

statsFolder:AddLabel("Rebirths")
local rebirthsStatsLabel = statsFolder:AddLabel("Actual: Waiting...")
local rebirthsGainLabel = statsFolder:AddLabel("Gained: 0")

statsFolder:AddLabel("Kills")
local killsStatsLabel = statsFolder:AddLabel("Actual: Waiting...")
local killsGainLabel = statsFolder:AddLabel("Gained: 0")

statsFolder:AddLabel("Brawls")
local brawlsStatsLabel = statsFolder:AddLabel("Actual: Waiting...")
local brawlsGainLabel = statsFolder:AddLabel("Gained: 0")

statsFolder:AddLabel("Time Of Session")
local sessionTimeLabel = statsFolder:AddLabel("Time: 00:00:00")

-- Función para formatear números
local function formatNumber(number)
    if number >= 1e15 then return string.format("%.2fQ", number/1e15)
    elseif number >= 1e12 then return string.format("%.2fT", number/1e12)
    elseif number >= 1e9 then return string.format("%.2fB", number/1e9)
    elseif number >= 1e6 then return string.format("%.2fM", number/1e6)
    elseif number >= 1e3 then return string.format("%.2fK", number/1e3)
    end
    return tostring(math.floor(number))
end

local function formatNumberWithCommas(number)
    local formatted = tostring(math.floor(number))
    local k
    while true do
        formatted, k = string.gsub(formatted, "^(-?%d+)(%d%d%d)", '%1,%2')
        if k == 0 then break end
    end
    return formatted
end

local function formatTime(seconds)
    local days = math.floor(seconds / 86400)
    local hours = math.floor((seconds % 86400) / 3600)
    local minutes = math.floor((seconds % 3600) / 60)
    local secs = seconds % 60
    
    if days > 0 then
        return string.format("%dd %02dh %02dm %02ds", days, hours, minutes, secs)
    else
        return string.format("%02d:%02d:%02d", hours, minutes, secs)
    end
end

-- Inicializar seguimiento
local function startTracking()
    if not hasStartedTracking then
        local player = game.Players.LocalPlayer
        sessionStartStrength = player.leaderstats.Strength.Value
        sessionStartDurability = player.Durability.Value
        sessionStartKills = player.leaderstats.Kills.Value
        sessionStartRebirths = player.leaderstats.Rebirths.Value
        sessionStartBrawls = player.leaderstats.Brawls.Value
        sessionStartTime = os.time()
        hasStartedTracking = true
    end
end

-- Función para actualizar estadísticas
local function updateStats()
    local player = game.Players.LocalPlayer
    
    -- Iniciar seguimiento si aún no ha comenzado
    if not hasStartedTracking then
        startTracking()
    end
    
    -- Calcular valores actuales y ganancias
    local currentStrength = player.leaderstats.Strength.Value
    local currentDurability = player.Durability.Value
    local currentKills = player.leaderstats.Kills.Value
    local currentRebirths = player.leaderstats.Rebirths.Value
    local currentBrawls = player.leaderstats.Brawls.Value
    
    local strengthGain = currentStrength - sessionStartStrength
    local durabilityGain = currentDurability - sessionStartDurability
    local killsGain = currentKills - sessionStartKills
    local rebirthsGain = currentRebirths - sessionStartRebirths
    local brawlsGain = currentBrawls - sessionStartBrawls
    
    -- Actualizar valores de estadísticas actuales
    strengthStatsLabel.Text = string.format("Actual: %s", formatNumber(currentStrength))
    durabilityStatsLabel.Text = string.format("Actual: %s", formatNumber(currentDurability))
    rebirthsStatsLabel.Text = string.format("Actual: %s", formatNumber(currentRebirths))
    killsStatsLabel.Text = string.format("Actual: %s", formatNumber(currentKills))
    brawlsStatsLabel.Text = string.format("Actual: %s", formatNumber(currentBrawls))
    
    -- Actualizar valores de ganancias
    strengthGainLabel.Text = string.format("Gained: %s", formatNumber(strengthGain))
    durabilityGainLabel.Text = string.format("Gained: %s", formatNumber(durabilityGain))
    rebirthsGainLabel.Text = string.format("Gained: %s", formatNumber(rebirthsGain))
    killsGainLabel.Text = string.format("Gained: %s", formatNumber(killsGain))
    brawlsGainLabel.Text = string.format("Gained: %s", formatNumber(brawlsGain))
    
    -- Actualizar tiempo de sesión
    local elapsedTime = os.time() - sessionStartTime
    local timeString = formatTime(elapsedTime)
    sessionTimeLabel.Text = string.format("Time: %s", timeString)
end

-- Actualizar estadísticas inicialmente
updateStats()

-- Actualizar estadísticas cada 2 segundos
spawn(function()
    while wait(2) do
        updateStats()
    end
end)

-- Agregar botones para funcionalidades adicionales
statsFolder:AddButton("Reset Stats", function()
    local player = game.Players.LocalPlayer
    sessionStartStrength = player.leaderstats.Strength.Value
    sessionStartDurability = player.Durability.Value
    sessionStartKills = player.leaderstats.Kills.Value
    sessionStartRebirths = player.leaderstats.Rebirths.Value
    sessionStartBrawls = player.leaderstats.Brawls.Value
    sessionStartTime = os.time()
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Seguimiento de Estadísticas",
        Text = "¡El seguimiento de progreso de la sesión ha sido reiniciado!",
        Duration = 0
    })
end)

statsFolder:AddButton("Copiar Estadísticas", function()
    local player = game.Players.LocalPlayer
    local statsText = "Estadísticas de Muscle Legends:\n\n"
    
    statsText = statsText .. "Strength: " .. formatNumberWithCommas(player.leaderstats.Strength.Value) .. "\n"
    statsText = statsText .. "Durability: " .. formatNumberWithCommas(player.Durability.Value) .. "\n"
    statsText = statsText .. "Rebirths: " .. formatNumberWithCommas(player.leaderstats.Rebirths.Value) .. "\n"
    statsText = statsText .. "Kills: " .. formatNumberWithCommas(player.leaderstats.Kills.Value) .. "\n"
    statsText = statsText .. "Brawls: " .. formatNumberWithCommas(player.leaderstats.Brawls.Value) .. "\n\n"
    
    -- Agregar estadísticas de sesión si el seguimiento ha comenzado
    if hasStartedTracking then
        local elapsedTime = os.time() - sessionStartTime
        local strengthGain = player.leaderstats.Strength.Value - sessionStartStrength
        local durabilityGain = player.Durability.Value - sessionStartDurability
        local killsGain = player.leaderstats.Kills.Value - sessionStartKills
        local rebirthsGain = player.leaderstats.Rebirths.Value - sessionStartRebirths
        local brawlsGain = player.leaderstats.Brawls.Value - sessionStartBrawls
        
        statsText = statsText .. "--- Estadísticas de Sesión ---\n"
        statsText = statsText .. "Time Of Session: " .. formatTime(elapsedTime) .. "\n"
        statsText = statsText .. "Strength Gained: " .. formatNumberWithCommas(strengthGain) .. "\n"
        statsText = statsText .. "Durability Gained: " .. formatNumberWithCommas(durabilityGain) .. "\n"
        statsText = statsText .. "Rebirths Gained: " .. formatNumberWithCommas(rebirthsGain) .. "\n"
        statsText = statsText .. "Kills Gained: " .. formatNumberWithCommas(killsGain) .. "\n"
        statsText = statsText .. "Brawls Gained: " .. formatNumberWithCommas(brawlsGain) .. "\n"
    end
    
    setclipboard(statsText)
end)

local playerLookupFolder = Stats:AddFolder("  Player Lookup")

local lookupLabels = {
    PlayerNameLabel = playerLookupFolder:AddLabel("Player: None selected"),
    PlayerStrengthLabel = playerLookupFolder:AddLabel("Strength: N/A"),
    PlayerDurabilityLabel = playerLookupFolder:AddLabel("Durability: N/A"),
    PlayerAgilityLabel = playerLookupFolder:AddLabel("Agility: N/A"),
    PlayerKillsLabel = playerLookupFolder:AddLabel("Kills: N/A"),
    PlayerEvilKarmaLabel = playerLookupFolder:AddLabel("Evil Karma: N/A"),
    PlayerGoodKarmaLabel = playerLookupFolder:AddLabel("Good Karma: N/A"),
    PlayerRebirthsLabel = playerLookupFolder:AddLabel("Rebirths: N/A"),
    PlayerStatusLabel = playerLookupFolder:AddLabel("Status: Enter a username")
}

local currentLookupPlayer = nil
local lookupConnections = {}

local function clearLookupConnections()
    for _, connection in pairs(lookupConnections) do
        if connection then
            connection:Disconnect()
        end
    end
    lookupConnections = {}
end

local function updateLookupLabels(targetPlayer)
    if not targetPlayer or not targetPlayer.Parent then
        lookupLabels.PlayerNameLabel.Text = "Player: Not found"
        lookupLabels.PlayerStrengthLabel.Text = "Strength: N/A"
        lookupLabels.PlayerDurabilityLabel.Text = "Durability: N/A"
        lookupLabels.PlayerAgilityLabel.Text = "Agility: N/A"
        lookupLabels.PlayerKillsLabel.Text = "Kills: N/A"
        lookupLabels.PlayerEvilKarmaLabel.Text = "Evil Karma: N/A"
        lookupLabels.PlayerGoodKarmaLabel.Text = "Good Karma: N/A"
        lookupLabels.PlayerRebirthsLabel.Text = "Rebirths: N/A"
        lookupLabels.PlayerStatusLabel.Text = "Status: Player not found"
        return
    end

    lookupLabels.PlayerNameLabel.Text = "Player: " .. targetPlayer.Name
    
    local leaderstats = targetPlayer:FindFirstChild("leaderstats")
    local strengthStat = leaderstats and leaderstats:FindFirstChild("Strength")
    local durabilityStat = targetPlayer:FindFirstChild("Durability")
    local agilityStat = targetPlayer:FindFirstChild("Agility")
    local killsStat = leaderstats and leaderstats:FindFirstChild("Kills")
    local evilKarmaStat = targetPlayer:FindFirstChild("evilKarma")
    local goodKarmaStat = targetPlayer:FindFirstChild("goodKarma")
    local rebirthStat = leaderstats and leaderstats:FindFirstChild("Rebirths")

    lookupLabels.PlayerStrengthLabel.Text = strengthStat and ("Strength: " .. abbreviateNumber(strengthStat.Value)) or "Strength: N/A"
    lookupLabels.PlayerDurabilityLabel.Text = durabilityStat and ("Durability: " .. abbreviateNumber(durabilityStat.Value)) or "Durability: N/A"
    lookupLabels.PlayerAgilityLabel.Text = agilityStat and ("Agility: " .. abbreviateNumber(agilityStat.Value)) or "Agility: N/A"
    lookupLabels.PlayerKillsLabel.Text = killsStat and ("Kills: " .. abbreviateNumber(killsStat.Value)) or "Kills: N/A"
    lookupLabels.PlayerEvilKarmaLabel.Text = evilKarmaStat and ("Evil Karma: " .. abbreviateNumber(evilKarmaStat.Value)) or "Evil Karma: N/A"
    lookupLabels.PlayerGoodKarmaLabel.Text = goodKarmaStat and ("Good Karma: " .. abbreviateNumber(goodKarmaStat.Value)) or "Good Karma: N/A"
    lookupLabels.PlayerRebirthsLabel.Text = rebirthStat and ("Rebirths: " .. abbreviateNumber(rebirthStat.Value)) or "Rebirths: N/A"
    lookupLabels.PlayerStatusLabel.Text = "Status: Stats loaded successfully"
end

local function connectPlayerStats(targetPlayer)
    clearLookupConnections()
    
    if not targetPlayer or not targetPlayer.Parent then
        return
    end

    local leaderstats = targetPlayer:FindFirstChild("leaderstats")
    
    if leaderstats then
        local strengthStat = leaderstats:FindFirstChild("Strength")
        local killsStat = leaderstats:FindFirstChild("Kills")
        local rebirthStat = leaderstats:FindFirstChild("Rebirths")
        
        if strengthStat then
            table.insert(lookupConnections, strengthStat.Changed:Connect(function()
                updateLookupLabels(targetPlayer)
            end))
        end
        
        if killsStat then
            table.insert(lookupConnections, killsStat.Changed:Connect(function()
                updateLookupLabels(targetPlayer)
            end))
        end
        
        if rebirthStat then
            table.insert(lookupConnections, rebirthStat.Changed:Connect(function()
                updateLookupLabels(targetPlayer)
            end))
        end
    end
    
    local durabilityStat = targetPlayer:FindFirstChild("Durability")
    local agilityStat = targetPlayer:FindFirstChild("Agility")
    local evilKarmaStat = targetPlayer:FindFirstChild("evilKarma")
    local goodKarmaStat = targetPlayer:FindFirstChild("goodKarma")
    
    if durabilityStat then
        table.insert(lookupConnections, durabilityStat.Changed:Connect(function()
            updateLookupLabels(targetPlayer)
        end))
    end
    
    if agilityStat then
        table.insert(lookupConnections, agilityStat.Changed:Connect(function()
            updateLookupLabels(targetPlayer)
        end))
    end
    
    if evilKarmaStat then
        table.insert(lookupConnections, evilKarmaStat.Changed:Connect(function()
            updateLookupLabels(targetPlayer)
        end))
    end
    
    if goodKarmaStat then
        table.insert(lookupConnections, goodKarmaStat.Changed:Connect(function()
            updateLookupLabels(targetPlayer)
        end))
    end
end

playerLookupFolder:AddTextBox("Enter Username", function(username)
    if username == "" then
        clearLookupConnections()
        currentLookupPlayer = nil
        lookupLabels.PlayerNameLabel.Text = "Player: None selected"
        lookupLabels.PlayerStrengthLabel.Text = "Strength: N/A"
        lookupLabels.PlayerDurabilityLabel.Text = "Durability: N/A"
        lookupLabels.PlayerAgilityLabel.Text = "Agility: N/A"
        lookupLabels.PlayerKillsLabel.Text = "Kills: N/A"
        lookupLabels.PlayerEvilKarmaLabel.Text = "Evil Karma: N/A"
        lookupLabels.PlayerGoodKarmaLabel.Text = "Good Karma: N/A"
        lookupLabels.PlayerRebirthsLabel.Text = "Rebirths: N/A"
        lookupLabels.PlayerStatusLabel.Text = "Status: Enter a username"
        return
    end
    
    lookupLabels.PlayerStatusLabel.Text = "Status: Searching for player..."
    
    local targetPlayer = nil
    for _, player in pairs(game.Players:GetPlayers()) do
        if player.Name:lower():find(username:lower()) or player.DisplayName:lower():find(username:lower()) then
            targetPlayer = player
            break
        end
    end
    
    if targetPlayer then
        currentLookupPlayer = targetPlayer
        updateLookupLabels(targetPlayer)
        connectPlayerStats(targetPlayer)
    else
        clearLookupConnections()
        currentLookupPlayer = nil
        lookupLabels.PlayerNameLabel.Text = "Player: " .. username
        lookupLabels.PlayerStrengthLabel.Text = "Strength: N/A"
        lookupLabels.PlayerDurabilityLabel.Text = "Durability: N/A"
        lookupLabels.PlayerAgilityLabel.Text = "Agility: N/A"
        lookupLabels.PlayerKillsLabel.Text = "Kills: N/A"
        lookupLabels.PlayerEvilKarmaLabel.Text = "Evil Karma: N/A"
        lookupLabels.PlayerGoodKarmaLabel.Text = "Good Karma: N/A"
        lookupLabels.PlayerRebirthsLabel.Text = "Rebirths: N/A"
        lookupLabels.PlayerStatusLabel.Text = "Status: Player not found in server"
    end
end, {clear = false})

playerLookupFolder:AddButton("Refresh Player Stats", function()
    if currentLookupPlayer then
        updateLookupLabels(currentLookupPlayer)
        lookupLabels.PlayerStatusLabel.Text = "Status: Stats refreshed"
    else
        lookupLabels.PlayerStatusLabel.Text = "Status: No player selected"
    end
end)

-- Variables para rastrear valores y tiempos
local previousValues = {
    Strength = 0,
    Durability = 0,
    Rebirths = 0,
    Kills = 0
}

local measurementStartTime = {
    Strength = 0,
    Durability = 0,
    Rebirths = 0,
    Kills = 0
}

local rates = {
    Strength = 0,
    Durability = 0,
    Rebirths = 0,
    Kills = 0
}

-- Crear los 4 folders
local strengthFolder = Calculator:AddFolder("  Strength")
local durabilityFolder = Calculator:AddFolder("  Durability") 
local rebirthsFolder = Calculator:AddFolder("  Rebirths")
local killsFolder = Calculator:AddFolder("  Kills")

-- Función para obtener valor actual de estadística
local function getCurrentValue(statName)
    local player = game.Players.LocalPlayer
    if not player then return 0 end
    
    if statName == "Strength" then
        local leaderstats = player:FindFirstChild("leaderstats")
        if leaderstats then
            local stat = leaderstats:FindFirstChild("Strength")
            return stat and stat.Value or 0
        end
    elseif statName == "Durability" then
        local stat = player:FindFirstChild("Durability")
        return stat and stat.Value or 0
    elseif statName == "Rebirths" then
        local leaderstats = player:FindFirstChild("leaderstats")
        if leaderstats then
            local stat = leaderstats:FindFirstChild("Rebirths")
            return stat and stat.Value or 0
        end
    elseif statName == "Kills" then
        local leaderstats = player:FindFirstChild("leaderstats")
        if leaderstats then
            local stat = leaderstats:FindFirstChild("Kills")
            return stat and stat.Value or 0
        end
    end
    return 0
end

-- Función para formatear números grandes
local function formatNumber(num)
    if num == math.huge then
        return "∞"
    elseif num == 0 then
        return "0"
    elseif num < 0.01 and num > 0 then
        return "~0"
    end
    
    local abs = math.abs(num)
    local sign = num < 0 and "-" or ""
    
    if abs >= 1e30 then
        return sign .. string.format("%.2f", abs / 1e30) .. "No"  -- Nonillion
    elseif abs >= 1e27 then
        return sign .. string.format("%.2f", abs / 1e27) .. "Oc"  -- Octillion
    elseif abs >= 1e24 then
        return sign .. string.format("%.2f", abs / 1e24) .. "Sp"  -- Septillion
    elseif abs >= 1e21 then
        return sign .. string.format("%.2f", abs / 1e21) .. "Sx"  -- Sextillion
    elseif abs >= 1e18 then
        return sign .. string.format("%.2f", abs / 1e18) .. "Qt"  -- Quintillion
    elseif abs >= 1e15 then
        return sign .. string.format("%.2f", abs / 1e15) .. "Qd"  -- Quadrillion
    elseif abs >= 1e12 then
        return sign .. string.format("%.2f", abs / 1e12) .. "T"   -- Trillion
    elseif abs >= 1e9 then
        return sign .. string.format("%.2f", abs / 1e9) .. "B"    -- Billion
    elseif abs >= 1e6 then
        return sign .. string.format("%.2f", abs / 1e6) .. "M"    -- Million
    elseif abs >= 1e3 then
        return sign .. string.format("%.2f", abs / 1e3) .. "K"    -- Thousand
    else
        return sign .. string.format("%.2f", abs)
    end
end

-- Crear labels para Strength
local strengthLabels = {
    status = strengthFolder:AddLabel("Status: Iniciando..."),
    perMinute = strengthFolder:AddLabel("Per Minute: -"),
    perHour = strengthFolder:AddLabel("Per Hour: -"),
    perDay = strengthFolder:AddLabel("Per Day: -"),
    perWeek = strengthFolder:AddLabel("Per Week: -"),
    perMonth = strengthFolder:AddLabel("Per Month: -")
}

-- Crear labels para Durability
local durabilityLabels = {
    status = durabilityFolder:AddLabel("Status: Iniciando..."),
    perMinute = durabilityFolder:AddLabel("Per Minute: -"),
    perHour = durabilityFolder:AddLabel("Per Hour: -"),
    perDay = durabilityFolder:AddLabel("Per Day: -"),
    perWeek = durabilityFolder:AddLabel("Per Week: -"),
    perMonth = durabilityFolder:AddLabel("Per Month: -")
}

-- Crear labels para Rebirths
local rebirthsLabels = {
    status = rebirthsFolder:AddLabel("Status: Iniciando..."),
    perMinute = rebirthsFolder:AddLabel("Per Minute: -"),
    perHour = rebirthsFolder:AddLabel("Per Hour: -"),
    perDay = rebirthsFolder:AddLabel("Per Day: -"),
    perWeek = rebirthsFolder:AddLabel("Per Week: -"),
    perMonth = rebirthsFolder:AddLabel("Per Month: -")
}

-- Crear labels para Kills
local killsLabels = {
    status = killsFolder:AddLabel("Status: Iniciando..."),
    perMinute = killsFolder:AddLabel("Per Minute: -"),
    perHour = killsFolder:AddLabel("Per Hour: -"),
    perDay = killsFolder:AddLabel("Per Day: -"),
    perWeek = killsFolder:AddLabel("Per Week: -"),
    perMonth = killsFolder:AddLabel("Per Month: -")
}

-- Función para actualizar labels de una estadística
local function updateLabels(labels, rate, statName)
    local currentTime = tick()
    local startTime = measurementStartTime[statName]
    
    if startTime == 0 then
        labels.status.Text = "Status: Esperando inicio automático..."
        return
    end
    
    local timeElapsed = currentTime - startTime
    
    if timeElapsed < 60 then
        local remaining = 60 - timeElapsed
        labels.status.Text = "Status: Midiendo... " .. math.ceil(remaining) .. "s"
        labels.perMinute.Text = "Per Minute: Calculando..."
        labels.perHour.Text = "Per Hour: Calculando..."
        labels.perDay.Text = "Per Day: Calculando..."
        labels.perWeek.Text = "Per Week: Calculando..."
        labels.perMonth.Text = "Per Month: Calculando..."
    else
        labels.status.Text = "Status:  Activo"
        
        local perMinute = rate
        local perHour = rate * 60
        local perDay = rate * 60 * 24
        local perWeek = rate * 60 * 24 * 7
        local perMonth = rate * 60 * 24 * 30
        
        labels.perMinute.Text = "Per Minute: " .. formatNumber(perMinute)
        labels.perHour.Text = "Per Hour: " .. formatNumber(perHour)
        labels.perDay.Text = "Per Day: " .. formatNumber(perDay)
        labels.perWeek.Text = "Per Week: " .. formatNumber(perWeek)
        labels.perMonth.Text = "Per Month: " .. formatNumber(perMonth)
    end
end

-- Función para inicializar medición automáticamente
local function initializeMeasurement()
    local currentTime = tick()
    
    for statName, _ in pairs(measurementStartTime) do
        measurementStartTime[statName] = currentTime
        previousValues[statName] = getCurrentValue(statName)
    end
    
    print(" Calculator iniciado automáticamente")
end

-- Función para reiniciar todo
local function restartAll()
    initializeMeasurement()
    for statName, _ in pairs(rates) do
        rates[statName] = 0
    end
    print(" Calculator reiniciado")
end

-- Función principal de cálculo
local function calculateRates()
    local currentTime = tick()
    
    for statName, startTime in pairs(measurementStartTime) do
        if startTime ~= 0 then
            local timeElapsed = currentTime - startTime
            
            if timeElapsed >= 60 then
                local currentValue = getCurrentValue(statName)
                local previousValue = previousValues[statName]
                local difference = currentValue - previousValue
                
                -- Calcular rate por minuto
                rates[statName] = (difference / timeElapsed) * 60
            end
        end
    end
    
    -- Actualizar todas las labels
    updateLabels(strengthLabels, rates.Strength, "Strength")
    updateLabels(durabilityLabels, rates.Durability, "Durability")
    updateLabels(rebirthsLabels, rates.Rebirths, "Rebirths")
    updateLabels(killsLabels, rates.Kills, "Kills")
end

-- Botón de reinicio
Calculator:AddButton(" Reiniciar Calculator", function()
    restartAll()
end)

-- Inicializar automáticamente
task.spawn(function()
    task.wait(2) -- Esperar a que cargue todo
    initializeMeasurement()
end)

-- Loop principal
task.spawn(function()
    while true do
        calculateRates()
        task.wait(1)
    end
end)

print("📊 Calculator cargado - Iniciará automáticamente en 2 segundos")

local titleLabel = Killer:AddLabel("Auto Kill ")

local dropdown = Killer:AddDropdown("Select Pet", function(text)
    safeCall(function()
        local petsFolder = game.Players.LocalPlayer.petsFolder
        for _, folder in pairs(petsFolder:GetChildren()) do
            if folder:IsA("Folder") then
                for _, pet in pairs(folder:GetChildren()) do
                    game:GetService("ReplicatedStorage").rEvents.equipPetEvent:FireServer("unequipPet", pet)
                end
            end
        end
        task.wait(0.2)

        local petName = text
        local petsToEquip = {}

        for _, pet in pairs(game.Players.LocalPlayer.petsFolder.Unique:GetChildren()) do
            if pet.Name == petName then
                table.insert(petsToEquip, pet)
            end
        end

        local maxPets = 8
        local equippedCount = math.min(#petsToEquip, maxPets)

        for i = 1, equippedCount do
            game:GetService("ReplicatedStorage").rEvents.equipPetEvent:FireServer("equipPet", petsToEquip[i])
            task.wait(0.1)
        end
    end)
end)

dropdown:Add("Wild Wizard")
dropdown:Add("Mighty Monster")

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local playerWhitelist = {}
local targetPlayerNames = {}
local autoGoodKarma = false
local autoBadKarma = false
local autoKill = false
local killTarget = false
local spying = false
local autoEquipPunch = false
local autoPunchNoAnim = false
local targetDropdownItems = {}
local availableTargets = {}

Killer:AddSwitch("Auto Good Karma", function(bool)
    autoGoodKarma = bool
    task.spawn(function()
        while autoGoodKarma do
            local playerChar = LocalPlayer.Character
            local rightHand = playerChar and playerChar:FindFirstChild("RightHand")
            local leftHand = playerChar and playerChar:FindFirstChild("LeftHand")
            if playerChar and rightHand and leftHand then
                for _, target in ipairs(Players:GetPlayers()) do
                    if target ~= LocalPlayer then
                        local evilKarma = target:FindFirstChild("evilKarma")
                        local goodKarma = target:FindFirstChild("goodKarma")
                        if evilKarma and goodKarma and evilKarma:IsA("IntValue") and goodKarma:IsA("IntValue") and evilKarma.Value > goodKarma.Value then
                            local rootPart = target.Character and target.Character:FindFirstChild("HumanoidRootPart")
                            if rootPart then
                                firetouchinterest(rightHand, rootPart, 1)
                                firetouchinterest(leftHand, rootPart, 1)
                                firetouchinterest(rightHand, rootPart, 0)
                                firetouchinterest(leftHand, rootPart, 0)
                            end
                        end
                    end
                end
            end
            task.wait(0.01)
        end
    end)
end)

Killer:AddSwitch("Auto Bad Karma", function(bool)
    autoBadKarma = bool
    task.spawn(function()
        while autoBadKarma do
            local playerChar = LocalPlayer.Character
            local rightHand = playerChar and playerChar:FindFirstChild("RightHand")
            local leftHand = playerChar and playerChar:FindFirstChild("LeftHand")
            if playerChar and rightHand and leftHand then
                for _, target in ipairs(Players:GetPlayers()) do
                    if target ~= LocalPlayer then
                        local evilKarma = target:FindFirstChild("evilKarma")
                        local goodKarma = target:FindFirstChild("goodKarma")
                        if evilKarma and goodKarma and evilKarma:IsA("IntValue") and goodKarma:IsA("IntValue") and goodKarma.Value > evilKarma.Value then
                            local rootPart = target.Character and target.Character:FindFirstChild("HumanoidRootPart")
                            if rootPart then
                                firetouchinterest(rightHand, rootPart, 1)
                                firetouchinterest(leftHand, rootPart, 1)
                                firetouchinterest(rightHand, rootPart, 0)
                                firetouchinterest(leftHand, rootPart, 0)
                            end
                        end
                    end
                end
            end
            task.wait(0.01)
        end
    end)
end)

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local friendWhitelistActive = false

Killer:AddSwitch("Auto Whitelist Friends", function(state)
    friendWhitelistActive = state

    if state then
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and LocalPlayer:IsFriendsWith(player.UserId) then
                playerWhitelist[player.Name] = true
            end
        end

        Players.PlayerAdded:Connect(function(player)
            if friendWhitelistActive and player ~= LocalPlayer and LocalPlayer:IsFriendsWith(player.UserId) then
                playerWhitelist[player.Name] = true
            end
        end)
    else
        for name in pairs(playerWhitelist) do
            local friend = Players:FindFirstChild(name)
            if friend and LocalPlayer:IsFriendsWith(friend.UserId) then
                playerWhitelist[name] = nil
            end
        end
    end
end)

Killer:AddTextBox("Whitelist", function(text)
    local target = Players:FindFirstChild(text)
    if target then
        playerWhitelist[target.Name] = true
    end
end)

Killer:AddTextBox("UnWhitelist", function(text)
    local target = Players:FindFirstChild(text)
    if target then
        playerWhitelist[target.Name] = nil
    end
end)

Killer:AddSwitch("Auto Kill", function(bool)
    autoKill = bool

    task.spawn(function()
        while autoKill do
            local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
            local rightHand = character:FindFirstChild("RightHand")
            local leftHand = character:FindFirstChild("LeftHand")

            local punch = LocalPlayer.Backpack:FindFirstChild("Punch")
            if punch and not character:FindFirstChild("Punch") then
                punch.Parent = character
            end

            if rightHand and leftHand then
                for _, target in ipairs(Players:GetPlayers()) do
                    if target ~= LocalPlayer and not playerWhitelist[target.Name] then
                        local targetChar = target.Character
                        local rootPart = targetChar and targetChar:FindFirstChild("HumanoidRootPart")
                        if rootPart then
                            pcall(function()
                                firetouchinterest(rightHand, rootPart, 1)
                                firetouchinterest(leftHand, rootPart, 1)
                                firetouchinterest(rightHand, rootPart, 0)
                                firetouchinterest(leftHand, rootPart, 0)
                            end)
                        end
                    end
                end
            end

            task.wait(0.05)
        end
    end)
end)

local targetDropdown = Killer:AddDropdown("Select Target", function(name)
    if name and not table.find(targetPlayerNames, name) then
        table.insert(targetPlayerNames, name)
    end
end)

Killer:AddTextBox("Remove Target", function(name)
    for i, v in ipairs(targetPlayerNames) do
        if v == name then
            table.remove(targetPlayerNames, i)
            break
        end
    end
end)

for _, player in ipairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        targetDropdown:Add(player.Name)
        targetDropdownItems[player.Name] = true
    end
end

Players.PlayerAdded:Connect(function(player)
    if player ~= LocalPlayer then
        targetDropdown:Add(player.Name)
        targetDropdownItems[player.Name] = true
    end
end)

Players.PlayerRemoving:Connect(function(player)
    if targetDropdownItems[player.Name] then
        targetDropdownItems[player.Name] = nil
        targetDropdown:Clear()
        for name in pairs(targetDropdownItems) do
            targetDropdown:Add(name)
        end
    end

    for i = #targetPlayerNames, 1, -1 do
        if targetPlayerNames[i] == player.Name then
            table.remove(targetPlayerNames, i)
        end
    end
end)

Killer:AddSwitch("Start Kill Target", function(state)
    killTarget = state

    task.spawn(function()
        while killTarget do
            local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

            local punch = LocalPlayer.Backpack:FindFirstChild("Punch")
            if punch and not character:FindFirstChild("Punch") then
                punch.Parent = character
            end

            local rightHand = character:WaitForChild("RightHand", 5)
            local leftHand = character:WaitForChild("LeftHand", 5)

            if rightHand and leftHand then
                for _, name in ipairs(targetPlayerNames) do
                    local target = Players:FindFirstChild(name)
                    if target and target ~= LocalPlayer then
                        local rootPart = target.Character and target.Character:FindFirstChild("HumanoidRootPart")
                        if rootPart then
                            pcall(function()
                                firetouchinterest(rightHand, rootPart, 1)
                                firetouchinterest(leftHand, rootPart, 1)
                                firetouchinterest(rightHand, rootPart, 0)
                                firetouchinterest(leftHand, rootPart, 0)
                            end)
                        end
                    end
                end
            end

            task.wait(0.05)
        end
    end)
end)

local spyTargetDropdown = Killer:AddDropdown("Select View Target", function(name)
    targetPlayerName = name
end)

for _, player in ipairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        spyTargetDropdown:Add(player.Name)
    end
end

Players.PlayerAdded:Connect(function(player)
    if player ~= LocalPlayer then
        spyTargetDropdown:Add(player.Name)
    end
end)

Players.PlayerRemoving:Connect(function(player)
    if player ~= LocalPlayer then
        spyTargetDropdown:Clear()
        for _, plr in ipairs(Players:GetPlayers()) do
            if plr ~= LocalPlayer then
                spyTargetDropdown:Add(plr.Name)
            end
        end
    end
end)

Killer:AddSwitch("View Player", function(bool)
    spying = bool
    if not spying then
        local cam = workspace.CurrentCamera
        cam.CameraSubject = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") or LocalPlayer
        return
    end
    task.spawn(function()
        while spying do
            local target = Players:FindFirstChild(targetPlayerName)
            if target and target ~= LocalPlayer then
                local humanoid = target.Character and target.Character:FindFirstChild("Humanoid")
                if humanoid then
                    workspace.CurrentCamera.CameraSubject = humanoid
                end
            end
            task.wait(0.1)
        end
    end)
end)

Killer:AddLabel("---Egg Obligatorio And Nan---")

-- Switch principal
Killer:AddSwitch("Punch Death", function(value)
    allActive = value

    -- Limpiar conexiones existentes
    for _, conn in pairs(connections) do
        if conn and typeof(conn) == "RBXScriptConnection" then
            safeCall(function() conn:Disconnect() end)
        end
    end
    connections = {}

    if value then
        -- Auto Punch
        _G.AutoPunchToggle = true
        spawn(function()
            local character = player.Character or player.CharacterAdded:Wait()
            local backpack = player:WaitForChild("Backpack")
            local hand = "rightHand"

            local function getMuscleEvent()
                return player:FindFirstChild("muscleEvent")
            end

            -- Conexión para actualizar character
            connections.CharacterAdded = player.CharacterAdded:Connect(function(char)
                character = char
            end)

            -- Conexión para actualizar backpack
            connections.BackpackAdded = player.ChildAdded:Connect(function(child)
                if child.Name == "Backpack" then
                    backpack = child
                end
            end)

            -- Loop principal de Auto Punch
            while _G.AutoPunchToggle and allActive do
                safeCall(function()
                    local muscleEvent = getMuscleEvent()
                    character = player.Character
                    
                    if character and character:FindFirstChild("Humanoid") and muscleEvent then
                        local punchEquipped = character:FindFirstChild("Punch")
                        local punchInBackpack = backpack and backpack:FindFirstChild("Punch")

                        if not punchEquipped and punchInBackpack then
                            character.Humanoid:EquipTool(punchInBackpack)
                        end

                        muscleEvent:FireServer("punch", hand)
                    end
                end)
                task.wait(0.0001)
            end
        end)

        -- Auto Protein Egg
        _G.AutoProteinEgg = true
        spawn(function()
            local toolName = "Protein Egg"
            local character = player.Character or player.CharacterAdded:Wait()

            local function restoreVisibility(tool)
                if not tool then return end
                for _, part in ipairs(tool:GetDescendants()) do
                    if part:IsA("BasePart") then
                        safeCall(function()
                            part.Transparency = 0
                            part.LocalTransparencyModifier = 0
                        end)
                    end
                end
            end

            local function findTool()
                local tool = player.Backpack:FindFirstChild(toolName)
                if tool then return tool end
                
                tool = starterPack:FindFirstChild(toolName)
                if tool then return tool end
                
                tool = replicatedStorage:FindFirstChild(toolName)
                return tool
            end

            local function forceEquip(tool)
                if not (character and character:FindFirstChild("Humanoid") and tool) then return end
                
                safeCall(function()
                    character.Humanoid:EquipTool(tool)
                end)
                task.wait(0.1)

                if not character:FindFirstChild(toolName) then
                    safeCall(function()
                        tool.Parent = character
                    end)
                    task.wait(0.1)
                end

                local equipped = character:FindFirstChild(toolName)
                if equipped then
                    restoreVisibility(equipped)
                end
            end

            local function equipIfNeeded()
                if not _G.AutoProteinEgg or not character or not allActive then return end

                local equipped = character:FindFirstChild(toolName)
                local needEquip = false

                if not equipped then
                    needEquip = true
                else
                    for _, part in ipairs(equipped:GetDescendants()) do
                        if part:IsA("BasePart") and part.Transparency > 0 then
                            needEquip = true
                            break
                        end
                    end
                end

                if needEquip then
                    local tool = findTool()
                    if tool then
                        if tool.Parent ~= player.Backpack then
                            safeCall(function()
                                local clone = tool:Clone()
                                clone.Parent = player.Backpack
                                tool = clone
                            end)
                        end
                        forceEquip(tool)
                    end
                end
            end

            -- Conexiones para Protein Egg
            connections.CharacterAddedEgg = player.CharacterAdded:Connect(function(char)
                character = char
                task.wait(1)
                equipIfNeeded()
            end)

            connections.BackpackChildAdded = player.Backpack.ChildAdded:Connect(function(child)
                if _G.AutoProteinEgg and child.Name == toolName then
                    task.wait(0.2)
                    equipIfNeeded()
                end
            end)

            -- Loop principal de Protein Egg
            while _G.AutoProteinEgg and allActive do
                equipIfNeeded()
                task.wait(0.5)
            end
        end)

        -- Anti Fly
        getgenv().AntiFlyActive = true
        connections.AntiFly = runService.Heartbeat:Connect(function()
            if not getgenv().AntiFlyActive or not allActive then return end
            
            local char = player.Character
            if not char then return end
            
            local root = char:FindFirstChild("HumanoidRootPart")
            if not root then return end
            
            local humanoid = char:FindFirstChildOfClass("Humanoid")
            if not humanoid then return end

            safeCall(function()
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
                raycastParams.FilterDescendantsInstances = {char}
                
                local raycastResult = workspace:Raycast(root.Position, Vector3.new(0, -500, 0), raycastParams)
                
                if raycastResult then
                    local groundY = raycastResult.Position.Y
                    local currentY = root.Position.Y
                    if currentY - groundY > 0.5 then
                        root.CFrame = CFrame.new(root.Position.X, groundY + 0.5, root.Position.Z)
                        humanoid.PlatformStand = true
                        humanoid.PlatformStand = false
                    end
                end
            end)
        end)

        -- Anti Lag
        spawn(function()
            local function softAntiLag()
                local classesToClean = {
                    ["ParticleEmitter"] = true,
                    ["Trail"] = true,
                    ["Smoke"] = true,
                    ["Fire"] = true
                }

                safeCall(function()
                    for _, obj in ipairs(workspace:GetChildren()) do
                        if obj:IsA("Model") or obj:IsA("Part") then
                            for _, sub in ipairs(obj:GetChildren()) do
                                if classesToClean[sub.ClassName] then
                                    sub:Destroy()
                                end
                            end
                        end
                    end
                end)

                local terrain = workspace:FindFirstChildOfClass("Terrain")
                if terrain then
                    safeCall(function()
                        terrain.WaterWaveSize = 0
                        terrain.WaterReflectance = 0
                        terrain.WaterTransparency = 1
                    end)
                end
            end

            local function setSunsetSky()
                safeCall(function()
                    local lighting = game:GetService("Lighting")
                    lighting.ClockTime = 18
                    lighting.Brightness = 1.5
                    lighting.OutdoorAmbient = Color3.fromRGB(150, 100, 80)
                    lighting.FogColor = Color3.fromRGB(200, 120, 100)
                    lighting.FogEnd = 500

                    for _, v in ipairs(lighting:GetChildren()) do
                        if v:IsA("Sky") then
                            v:Destroy()
                        end
                    end

                    local sky = Instance.new("Sky")
                    sky.Name = "SunsetSky"
                    sky.SkyboxBk = "rbxassetid://131889017"
                    sky.SkyboxDn = "rbxassetid://131889017"
                    sky.SkyboxFt = "rbxassetid://131889017"
                    sky.SkyboxLf = "rbxassetid://131889017"
                    sky.SkyboxRt = "rbxassetid://131889017"
                    sky.SkyboxUp = "rbxassetid://131889017"
                    sky.SunAngularSize = 10
                    sky.MoonAngularSize = 0
                    sky.SunTextureId = "rbxassetid://644432992"
                    sky.Parent = lighting
                end)
            end

            softAntiLag()
            setSunsetSky()
        end)

        -- Auto Tropical Shake
        spawn(function()
            local backpack = player:WaitForChild("Backpack")
            while allActive do
                safeCall(function()
                    local shake = backpack:FindFirstChild("Tropical Shake")
                    if not shake then
                        return
                    end

                    shake.Parent = player.Character
                    runService.Heartbeat:Wait()

                    if shake.Activate then
                        shake:Activate()
                    elseif mouse1click then
                        mouse1click()
                    end
                end)
                task.wait(0.1)
            end
        end)

    else
        -- Desactivar todo
        _G.AutoPunchToggle = false
        _G.AutoProteinEgg = false
        getgenv().AntiFlyActive = false
    end
end)

-- Death Ring and Kill Aura
Killer:AddLabel("---Kill Aura---")

local function findPlayerByName(name)
    if not name or name == "" then return nil end
    name = name:lower()
    for _, player in pairs(game.Players:GetPlayers()) do
        if player.Name:lower():find(name, 1, true) or player.DisplayName:lower():find(name, 1, true) then
            return player
        end
    end
    return nil
end

Killer:AddTextBox("Range (1-140)", function(text)
    local range = tonumber(text)
    if range then
        range = math.clamp(range, 1, 140)
        _G.deathRingRange = range
    end
end)

Killer:AddSwitch("Death Ring", function(bool)
    _G.deathRingEnabled = bool

    if bool then
        if not _G.deathRingConnection then
            _G.deathRingConnection = RunService.Heartbeat:Connect(function()
                if not _G.deathRingEnabled then return end

                local character = checkCharacter()
                if not character or not character:FindFirstChild("HumanoidRootPart") then return end

                local myPosition = character.HumanoidRootPart.Position

                for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
                    if player == game.Players.LocalPlayer or isWhitelisted(player) then
                        continue                        
                    end

                    if isPlayerAlive(player) then
                        local playerPosition = player.Character.HumanoidRootPart.Position
                        local distance = (myPosition - playerPosition).Magnitude

                        if distance <= _G.deathRingRange then
                            killPlayer(player)
                        end
                    end
                end
            end)
        end
    else
        if _G.deathRingConnection then
            _G.deathRingConnection:Disconnect()
            _G.deathRingConnection = nil
        end
    end
end)

local button = Killer:AddButton("Remove Punch Anim", function()
    local blockedAnimations = {
        ["rbxassetid://3638729053"] = true,
        ["rbxassetid://3638767427"] = true,
    }

    local function setupAnimationBlocking()
        local char = game.Players.LocalPlayer.Character
        if not char or not char:FindFirstChild("Humanoid") then return end

        local humanoid = char:FindFirstChild("Humanoid")

        for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
            if track.Animation then
                local animId = track.Animation.AnimationId
                local animName = track.Name:lower()

                if blockedAnimations[animId] or
                    animName:match("punch") or
                    animName:match("attack") or
                    animName:match("right") then
                    track:Stop()
                end
            end
        end

        if not _G.AnimBlockConnection then
            local connection = humanoid.AnimationPlayed:Connect(function(track)
                if track.Animation then
                    local animId = track.Animation.AnimationId
                    local animName = track.Name:lower()

                    if blockedAnimations[animId] or
                        animName:match("punch") or
                        animName:match("attack") or
                        animName:match("right") then
                        track:Stop()
                    end
                end
            end)

            _G.AnimBlockConnection = connection
        end
    end

    setupAnimationBlocking()

    local function overrideToolActivation()
        local function processTool(tool)
            if tool and (tool.Name == "Punch" or tool.Name:match("Attack") or tool.Name:match("Right")) then
                if not tool:GetAttribute("ActivatedOverride") then
                    tool:SetAttribute("ActivatedOverride", true)

                    local connection = tool.Activated:Connect(function()
                        task.wait(0.05)

                        local char = game.Players.LocalPlayer.Character
                        if char and char:FindFirstChild("Humanoid") then
                            for _, track in pairs(char.Humanoid:GetPlayingAnimationTracks()) do
                                if track.Animation then
                                    local animId = track.Animation.AnimationId
                                    local animName = track.Name:lower()

                                    if blockedAnimations[animId] or
                                        animName:match("punch") or
                                        animName:match("attack") or
                                        animName:match("right") then
                                        track:Stop()
                                    end
                                end
                            end
                        end
                    end)

                    if not _G.ToolConnections then
                        _G.ToolConnections = {}
                    end
                    _G.ToolConnections[tool] = connection
                end
            end
        end

        for _, tool in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
            processTool(tool)
        end

        local char = game.Players.LocalPlayer.Character
        if char then
            for _, tool in pairs(char:GetChildren()) do
                if tool:IsA("Tool") then
                    processTool(tool)
                end
            end
        end

        if not _G.BackpackAddedConnection then
            _G.BackpackAddedConnection = game.Players.LocalPlayer.Backpack.ChildAdded:Connect(function(child)
                if child:IsA("Tool") then
                    task.wait(0.1)
                    processTool(child)
                end
            end)
        end

        if not _G.CharacterToolAddedConnection and char then
            _G.CharacterToolAddedConnection = char.ChildAdded:Connect(function(child)
                if child:IsA("Tool") then
                    task.wait(0.1)
                    processTool(child)
                end
            end)
        end
    end

    overrideToolActivation()

    if not _G.AnimMonitorConnection then
        _G.AnimMonitorConnection = game:GetService("RunService").Heartbeat:Connect(function()
            if tick() % 0.5 < 0.01 then
                local char = game.Players.LocalPlayer.Character
                if char and char:FindFirstChild("Humanoid") then
                    for _, track in pairs(char.Humanoid:GetPlayingAnimationTracks()) do
                        if track.Animation then
                            local animId = track.Animation.AnimationId
                            local animName = track.Name:lower()

                            if blockedAnimations[animId] or
                                animName:match("punch") or
                                animName:match("attack") or
                                animName:match("right") then
                                track:Stop()
                            end
                        end
                    end
                end
            end
        end)
    end

    if not _G.CharacterAddedConnection then
        _G.CharacterAddedConnection = game.Players.LocalPlayer.CharacterAdded:Connect(function(newChar)
            task.wait(1)
            setupAnimationBlocking()
            overrideToolActivation()

            if _G.CharacterToolAddedConnection then
                _G.CharacterToolAddedConnection:Disconnect()
            end

            _G.CharacterToolAddedConnection = newChar.ChildAdded:Connect(function(child)
                if child:IsA("Tool") then
                    task.wait(0.1)
                    processTool(child)
                end
            end)
        end)
    end
end)

function RecoveryPunch()
    if _G.AnimBlockConnection then
        _G.AnimBlockConnection:Disconnect()
        _G.AnimBlockConnection = nil
    end
    if _G.AnimMonitorConnection then
        _G.AnimMonitorConnection:Disconnect()
        _G.AnimMonitorConnection = nil
    end
    if _G.ToolConnections then
        for _, conn in pairs(_G.ToolConnections) do
            if conn then conn:Disconnect() end
        end
        _G.ToolConnections = nil
    end
    if _G.BackpackAddedConnection then
        _G.BackpackAddedConnection:Disconnect()
        _G.BackpackAddedConnection = nil
    end
    if _G.CharacterToolAddedConnection then
        _G.CharacterToolAddedConnection:Disconnect()
        _G.CharacterToolAddedConnection = nil
    end
    if _G.CharacterAddedConnection then
        _G.CharacterAddedConnection:Disconnect()
        _G.CharacterAddedConnection = nil
    end
end

Killer:AddButton("Recover Punch Anim", function()
    RecoveryPunch()
end)

Killer:AddSwitch("Auto Equip Punch", function(state)
	autoEquipPunch = state
	task.spawn(function()
		while autoEquipPunch do
			local punch = LocalPlayer.Backpack:FindFirstChild("Punch")
			if punch then
				punch.Parent = LocalPlayer.Character
			end
			task.wait(0.1)
		end
	end)
end)

Killer:AddSwitch("Auto Punch [No Animation]", function(state)
	autoPunchNoAnim = state
	task.spawn(function()
		while autoPunchNoAnim do
			local punch = LocalPlayer.Backpack:FindFirstChild("Punch") or LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Punch")
			if punch then
				if punch.Parent ~= LocalPlayer.Character then
					punch.Parent = LocalPlayer.Character
				end
				LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
				LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
			else
				autoPunchNoAnim = false
			end
			task.wait(0.01)
		end
	end)
end)

Killer:AddSwitch("Auto Punch", function(state)
	_G.fastHitActive = state
	if state then
		task.spawn(function()
			while _G.fastHitActive do
				local punch = LocalPlayer.Backpack:FindFirstChild("Punch")
				if punch then
					punch.Parent = LocalPlayer.Character
					if punch:FindFirstChild("attackTime") then
						punch.attackTime.Value = 0
					end
				end
				task.wait(0.1)
			end
		end)
		task.spawn(function()
			while _G.fastHitActive do
				local punch = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Punch")
				if punch then
					punch:Activate()
				end
				task.wait(0.1)
			end
		end)
	else
		local punch = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Punch")
		if punch then
			punch.Parent = LocalPlayer.Backpack
		end
	end
end)

Killer:AddSwitch("Fast Punch", function(state)
	_G.autoPunchActive = state
	if state then
		task.spawn(function()
			while _G.autoPunchActive do
				local punch = LocalPlayer.Backpack:FindFirstChild("Punch")
				if punch then
					punch.Parent = LocalPlayer.Character
					if punch:FindFirstChild("attackTime") then
						punch.attackTime.Value = 0
					end
				end
				task.wait()
			end
		end)
		task.spawn(function()
			while _G.autoPunchActive do
				local punch = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Punch")
				if punch then
					punch:Activate()
				end
				task.wait()
			end
		end)
	else
		local punch = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Punch")
		if punch then
			punch.Parent = LocalPlayer.Backpack
		end
	end
end)

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local killsShown = false
local killsGui = nil

local showKillsButton = Killer:AddButton("Kill Counter UI", function()
	killsShown = not killsShown

	if killsShown then
		if not killsGui then
			killsGui = Instance.new("ScreenGui")
			killsGui.Name = "KillsGui"
			killsGui.ResetOnSpawn = false
			killsGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

			local killsFrame = Instance.new("Frame")
			killsFrame.Size = UDim2.new(0, 180, 0, 55)
			killsFrame.Position = UDim2.new(0.5, -90, 0, 60)
			killsFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 139)
			killsFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
			killsFrame.Active = true
			killsFrame.Draggable = true
			killsFrame.Parent = killsGui

			local titleLabel = Instance.new("TextLabel")
			titleLabel.Size = UDim2.new(1, 0, 0, 20)
			titleLabel.Position = UDim2.new(0, 0, 0, 0)
			titleLabel.BackgroundTransparency = 1
			titleLabel.Text = "Project V1"
			titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
			titleLabel.Font = Enum.Font.SourceSansBold
			titleLabel.TextScaled = true
			titleLabel.Parent = killsFrame

			local killsLabel = Instance.new("TextLabel")
			killsLabel.Size = UDim2.new(1, 0, 0, 35)
			killsLabel.Position = UDim2.new(0, 0, 0, 20)
			killsLabel.BackgroundTransparency = 1
			killsLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
			killsLabel.TextScaled = true
			killsLabel.Font = Enum.Font.SourceSansBold
			killsLabel.Parent = killsFrame

			coroutine.wrap(function()
				while killsGui and killsGui.Parent do
					local kills = LocalPlayer:FindFirstChild("leaderstats") and LocalPlayer.leaderstats:FindFirstChild("Kills")
					if kills then
						killsLabel.Text = "Kills: " .. tostring(kills.Value)
					else
						killsLabel.Text = "Kills: 0"
					end
					task.wait(0.2)
				end
			end)()
		else
			killsGui.Enabled = true
		end
	else
		if killsGui then
			killsGui.Enabled = false
		end
	end
end)

showKillsButton.TextColor3 = Color3.fromRGB(255, 255, 255)

local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

local startTime = 0
local rebirthStartTime = 0
local startRebirths = 0
local hasStarted = false
local targetRebirth = math.huge

local packFarmTarget = false
local packFarmInfinite = false
local fastStrength = false

local function formatNumber(number)
    if number >= 1e15 then return string.format("%.2fQ", number/1e15)
    elseif number >= 1e12 then return string.format("%.2fT", number/1e12)
    elseif number >= 1e9 then return string.format("%.2fB", number/1e9)
    elseif number >= 1e6 then return string.format("%.2fM", number/1e6)
    elseif number >= 1e3 then return string.format("%.2fK", number/1e3)
    end
    return tostring(math.floor(number))
end

local function formatNumberWithCommas(number)
    local formatted = tostring(math.floor(number))
    local k
    while true do
        formatted, k = string.gsub(formatted, "^(-?%d+)(%d%d%d)", '%1,%2')
        if k == 0 then break end
    end
    return formatted
end

local function formatTime(seconds)
    local hours = math.floor(seconds / 3600)
    local minutes = math.floor((seconds % 3600) / 60)
    local secs = math.floor(seconds % 60)
    return string.format("%02d:%02d:%02d", hours, minutes, secs)
end

local packRebirthValues = {
    [0] = 1,  
    [1] = 2,  
    [2] = 4,  
    [3] = 6,  
    [4] = 8,  
    [5] = 10, 
    [6] = 12, 
    [7] = 14, 
    [8] = 16  
}

local function unequipAllPets()
    local petsFolder = player.petsFolder
    for _, folder in pairs(petsFolder:GetChildren()) do
        if folder:IsA("Folder") then
            for _, pet in pairs(folder:GetChildren()) do
                ReplicatedStorage.rEvents.equipPetEvent:FireServer("unequipPet", pet)
            end
        end
    end
    task.wait(0.1)
end

local function equipSpecificPacks(packName, count)
    unequipAllPets()
    task.wait(0.2)

    local packs = {}
    for _, pet in pairs(player.petsFolder.Unique:GetChildren()) do
        if pet.Name == packName then
            table.insert(packs, pet)
        end
    end

    local packsToEquip = math.min(count, #packs)
    for i = 1, packsToEquip do
        ReplicatedStorage.rEvents.equipPetEvent:FireServer("equipPet", packs[i])
        task.wait(0.1)
    end

    return packsToEquip
end

local function findMachine(machineName)
    local machine = workspace.machinesFolder:FindFirstChild(machineName)
    if not machine then
        for _, folder in pairs(workspace:GetChildren()) do
            if folder:IsA("Folder") and folder.Name:find("machines") then
                machine = folder:FindFirstChild(machineName)
                if machine then break end
            end
        end
    end
    return machine
end

local function pressE()
    local vim = game:GetService("VirtualInputManager")
    vim:SendKeyEvent(true, "E", false, game)
    task.wait(0.1)
    vim:SendKeyEvent(false, "E", false, game)
end

local isPositionLocked = false
local originalCFrame = nil
local function lockPosition(lock)
    isPositionLocked = lock

    if lock and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        originalCFrame = player.Character.HumanoidRootPart.CFrame

        if not _G.positionConnection then
            _G.positionConnection = game:GetService("RunService").Heartbeat:Connect(function()
                if isPositionLocked and player.Character and player.Character:FindFirstChild("HumanoidRootPart") and originalCFrame then
                    player.Character.HumanoidRootPart.CFrame = originalCFrame
                    player.Character.HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
                    player.Character.HumanoidRootPart.RotVelocity = Vector3.new(0, 0, 0)
                end
            end)
        end
    elseif not lock and _G.positionConnection then
        _G.positionConnection:Disconnect()
        _G.positionConnection = nil
    end
end

local function calculateOptimalPacks(currentRebirths, targetRebirths)
    local rebirthsNeeded = targetRebirths - currentRebirths

    if rebirthsNeeded <= 0 then
        return 0
    end

    if rebirthsNeeded == 1 then
        return 0
    end

    for packCount = 1, 8 do
        if packRebirthValues[packCount] == rebirthsNeeded then
            return packCount
        end
    end

    for packCount = 8, 1, -1 do
        if packRebirthValues[packCount] < rebirthsNeeded then
            local remaining = rebirthsNeeded - packRebirthValues[packCount]

            if remaining == 1 then
                return packCount
            end

            for secondPackCount = 8, 0, -1 do
                if packRebirthValues[secondPackCount] == remaining then
                    return packCount
                end
            end

            return packCount
        end
    end

    return 0
end

Farm:AddTextBox("Target Rebirth Amount", function(text)
    local num = tonumber(text)
    if num then
        targetRebirth = num
    else
        targetRebirth = math.huge
    end
end)

local targetPackToggle = Farm:AddSwitch("Pack Farm | Target", function(bool)
    packFarmTarget = bool

    if bool then
        if packFarmInfinite then
            packFarmInfinite = false
            infinitePackToggle:Set(false)
        end

        if fastStrength then
            fastStrength = false
            fastStrengthToggle:Set(false)
        end

        if targetRebirth ~= math.huge and targetRebirth > player.leaderstats.Rebirths.Value then
            task.spawn(function()
                lockPosition(true)

                while packFarmTarget do
                    local currentRebirths = player.leaderstats.Rebirths.Value

                    if currentRebirths >= targetRebirth then
                        packFarmTarget = false
                        targetPackToggle:Set(false)
                        lockPosition(false)
                        break
                    end

                    local rebirthCost = 10000 + (5000 * currentRebirths)
                    if player.ultimatesFolder:FindFirstChild("Golden Rebirth") then
                        local goldenRebirths = player.ultimatesFolder["Golden Rebirth"].Value
                        rebirthCost = math.floor(rebirthCost * (1 - (goldenRebirths * 0.1)))
                    end

                    local rebirthsNeeded = targetRebirth - currentRebirths

                    local packCount = 0

                    if rebirthsNeeded == 1 then
                        packCount = 0
                    else
                        for i = 8, 1, -1 do
                            if packRebirthValues[i] <= rebirthsNeeded then
                                packCount = i
                                break
                            end
                        end
                    end

                    equipSpecificPacks("Swift Samurai", 8)

                    while packFarmTarget and player.leaderstats.Strength.Value < rebirthCost do
                        for i = 1, 10 do
                            player.muscleEvent:FireServer("rep")
                        end
                        task.wait()
                    end

                    equipSpecificPacks("Tribal Overlord", packCount)

                    local machine = findMachine("Jungle Bar Lift")
                    if machine and machine:FindFirstChild("interactSeat") then
                        player.Character.HumanoidRootPart.CFrame = machine.interactSeat.CFrame * CFrame.new(0, 3, 0)
                        repeat
                            task.wait(0.1)
                            pressE()
                        until player.Character.Humanoid.Sit
                    end

                    local initialRebirths = player.leaderstats.Rebirths.Value
                    repeat
                        ReplicatedStorage.rEvents.rebirthRemote:InvokeServer("rebirthRequest")
                        task.wait(0.1)
                    until player.leaderstats.Rebirths.Value > initialRebirths

                    task.wait(0.5)
                end

                lockPosition(false)
                unequipAllPets()
            end)
        else
            packFarmTarget = false
            targetPackToggle:Set(false)
        end
    else
        lockPosition(false)
        unequipAllPets()
    end
end)

local infinitePackToggle = Farm:AddSwitch("Pack Farm | Infinite", function(bool)
    packFarmInfinite = bool

    if bool then
        if packFarmTarget then
            packFarmTarget = false
            targetPackToggle:Set(false)
        end

        if fastStrength then
            fastStrength = false
            fastStrengthToggle:Set(false)
        end

        task.spawn(function()
            lockPosition(true)

            while packFarmInfinite do
                local currentRebirths = player.leaderstats.Rebirths.Value

                local rebirthCost = 10000 + (5000 * currentRebirths)
                if player.ultimatesFolder:FindFirstChild("Golden Rebirth") then
                    local goldenRebirths = player.ultimatesFolder["Golden Rebirth"].Value
                    rebirthCost = math.floor(rebirthCost * (1 - (goldenRebirths * 0.1)))
                end

                equipSpecificPacks("Swift Samurai", 8)

                while packFarmInfinite and player.leaderstats.Strength.Value < rebirthCost do
                    for i = 1, 10 do
                        player.muscleEvent:FireServer("rep")
                    end
                    task.wait()
                end

                equipSpecificPacks("Tribal Overlord", 8)

                local machine = findMachine("Jungle Bar Lift")
                if machine and machine:FindFirstChild("interactSeat") then
                    player.Character.HumanoidRootPart.CFrame = machine.interactSeat.CFrame * CFrame.new(0, 3, 0)
                    repeat
                        task.wait(0.1)
                        pressE()
                    until player.Character.Humanoid.Sit
                end

                local initialRebirths = player.leaderstats.Rebirths.Value
                repeat
                    ReplicatedStorage.rEvents.rebirthRemote:InvokeServer("rebirthRequest")
                    task.wait(0.1)
                until player.leaderstats.Rebirths.Value > initialRebirths

                task.wait(0.5)
            end

            lockPosition(false)
            unequipAllPets()
        end)
    else
        lockPosition(false)
        unequipAllPets()
    end
end)

local fastStrengthToggle = Farm:AddSwitch("Pack Farm | Fast Strength", function(bool)
    fastStrength = bool

    if bool then
        if packFarmTarget then
            packFarmTarget = false
            targetPackToggle:Set(false)
        end

        if packFarmInfinite then
            packFarmInfinite = false
            infinitePackToggle:Set(false)
        end

        task.spawn(function()
            equipSpecificPacks("Swift Samurai", 8)

            while fastStrength do
                for i = 1, 10 do
                    player.muscleEvent:FireServer("rep")
                end
                task.wait()
            end
        end)
    else
        unequipAllPets()
    end
end)

PackFarmFolder:AddSwitch("Delete All Frames", function(state)
    local rSto = game:GetService("ReplicatedStorage")
    for _, obj in pairs(rSto:GetChildren()) do
        if obj.Name:match("Frame$") and obj:IsA("GuiObject") then
            if state then
                obj:Destroy()
            end
        end
    end
end)

-- Botón para Swift Samurai
PackFarmFolder:AddButton("Equip Swift Samurai (8x)", function()
    equipSpecificPets("Swift Samurai", 8)
end)

-- Botón para Tribal Overlord
PackFarmFolder:AddButton("Equip Tribal Overlord (8x)", function()
    equipSpecificPets("Tribal Overlord", 8)
end)

local statsFolder = Farm:AddFolder("Rebirth Statistics")
local runTimeLabel = statsFolder:AddLabel("RunTime: 00:00:00")
local currentRebirthsLabel = statsFolder:AddLabel("Current Rebirths: 0")
local rebirthGainsLabel = statsFolder:AddLabel("Rebirth Gains: 0")
local targetRebirthLabel = statsFolder:AddLabel("Target Rebirth: None")
local rebirthsNeededLabel = statsFolder:AddLabel("Rebirths Needed: N/A")
local timeToTargetLabel = statsFolder:AddLabel("Time To Target: N/A")
local estimatedCompletionLabel = statsFolder:AddLabel("Estimated Completion: N/A")
local perMinuteLabel = statsFolder:AddLabel("Per Minute: 0")
local perHourLabel = statsFolder:AddLabel("Per Hour: 0")
local hours12Label = statsFolder:AddLabel("12 Hours: 0")
local hours24Label = statsFolder:AddLabel("24 Hours: 0")

local settingsFolder = Farm:AddFolder("Settings")
settingsFolder:AddButton("Reset RunTime", function()
    startTime = os.time()
    rebirthStartTime = os.time()
    if player.leaderstats and player.leaderstats.Rebirths then
        startRebirths = player.leaderstats.Rebirths.Value
        hasStarted = true
    else
        startRebirths = 0
        hasStarted = false
    end
end)

task.spawn(function()
    startTime = os.time()
    rebirthStartTime = os.time()

    if player.leaderstats and player.leaderstats.Rebirths then
        startRebirths = player.leaderstats.Rebirths.Value
    end

    while true do
        if player.leaderstats and player.leaderstats.Rebirths then
            local currentRebirths = player.leaderstats.Rebirths.Value
            local elapsedTime = os.time() - startTime
            local rebirthElapsedTime = os.time() - rebirthStartTime

            currentRebirthsLabel.Text = string.format("Current Rebirths: %s", 
                formatNumberWithCommas(currentRebirths))

            if targetRebirth ~= math.huge then
                targetRebirthLabel.Text = string.format("Target Rebirth: %s", 
                    formatNumberWithCommas(targetRebirth))
            else
                targetRebirthLabel.Text = "Target Rebirth: None"
            end

            if hasStarted then
                local gainedRebirths = currentRebirths - startRebirths

                rebirthGainsLabel.Text = string.format("Rebirth Gains: %s", 
                    formatNumberWithCommas(gainedRebirths))

                    if rebirthElapsedTime > 0 then
                        local perMinute = gainedRebirths / (rebirthElapsedTime / 60)
                        local perHour = perMinute * 60

                        perMinuteLabel.Text = string.format("Per Minute: %s", 
                            formatNumberWithCommas(perMinute))
                        perHourLabel.Text = string.format("Per Hour: %s", 
                            formatNumberWithCommas(perHour))
                        hours12Label.Text = string.format("12 Hours: %s", 
                            formatNumberWithCommas(perHour * 12))
                        hours24Label.Text = string.format("24 Hours: %s", 
                            formatNumberWithCommas(perHour * 24))

                        if targetRebirth ~= math.huge then
                            local rebirthsNeeded = targetRebirth - currentRebirths
                            rebirthsNeededLabel.Text = string.format("Rebirths Needed: %s",
                                formatNumberWithCommas(rebirthsNeeded))

                            if perHour > 0 and rebirthsNeeded > 0 then
                                local hoursToTarget = rebirthsNeeded / perHour
                                local timeToTarget = formatTime(hoursToTarget * 3600)
                                timeToTargetLabel.Text = string.format("Time To Target: %s", timeToTarget)

                                local completionTimestamp = os.time() + (hoursToTarget * 3600)
                                local completionDate = os.date("%m/%d/%Y %H:%M", completionTimestamp)
                                estimatedCompletionLabel.Text = string.format("Estimated Completion: %s", completionDate)
                            elseif rebirthsNeeded <= 0 then
                                timeToTargetLabel.Text = "Time To Target: Reached!"
                                estimatedCompletionLabel.Text = "Estimated Completion: Completed!"
                            else
                                timeToTargetLabel.Text = "Time To Target: N/A"
                                estimatedCompletionLabel.Text = "Estimated Completion: N/A"
                            end
                        else
                            rebirthsNeededLabel.Text = "Rebirths Needed: N/A"
                            timeToTargetLabel.Text = "Time To Target: N/A"
                            estimatedCompletionLabel.Text = "Estimated Completion: N/A"
                        end
                    end

                    local timeString = formatTime(elapsedTime)
                    runTimeLabel.Text = string.format("RunTime: %s", timeString)
                else
                    rebirthGainsLabel.Text = "Rebirth Gains: 0"
                    perMinuteLabel.Text = "Per Minute: 0"
                    perHourLabel.Text = "Per Hour: 0"
                    hours12Label.Text = "12 Hours: 0"
                    hours24Label.Text = "24 Hours: 0"

                    runTimeLabel.Text = "RunTime: 00:00:00"

                    rebirthsNeededLabel.Text = "Rebirths Needed: N/A"
                    timeToTargetLabel.Text = "Time To Target: N/A"
                    estimatedCompletionLabel.Text = "Estimated Completion: N/A"
                end
            else
                currentRebirthsLabel.Text = "Current Rebirths: Waiting..."
            end

            task.wait(1)
        end
    end)

    local function checkForRebirthStart()
        if not player.leaderstats or not player.leaderstats:FindFirstChild("Rebirths") then
            repeat
                task.wait(0.5)
            until player.leaderstats and player.leaderstats:FindFirstChild("Rebirths")
        end

        local initialRebirths = player.leaderstats.Rebirths.Value

        player.leaderstats.Rebirths:GetPropertyChangedSignal("Value"):Connect(function()
            local newRebirths = player.leaderstats.Rebirths.Value
            if not hasStarted and newRebirths > initialRebirths then
                startTime = os.time()
                rebirthStartTime = os.time()
                startRebirths = initialRebirths
                hasStarted = true
            end
        end)
    end

    task.spawn(checkForRebirthStart)

teleport:AddButton("Spawn", function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoidRootPart.CFrame = CFrame.new(2, 8, 115)
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Teletransporte",
        Text = "Teleported to Spawn",
        Duration = 0
    })
end)

teleport:AddButton("Secret Area", function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoidRootPart.CFrame = CFrame.new(1947, 2, 6191)
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Teletransporte",
        Text = "Teleported to Secret Area",
        Duration = 0
    })
end)

teleport:AddButton("Tiny Island", function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoidRootPart.CFrame = CFrame.new(-34, 7, 1903)
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Teletransporte",
        Text = "Teleported to Tiny Island",
        Duration = 0
    })
end)

teleport:AddButton("Frozen Island", function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoidRootPart.CFrame = CFrame.new(- 2600.00244, 3.67686558, - 403.884369, 0.0873617008, 1.0482899e-09, 0.99617666, 3.07204253e-08, 1, - 3.7464023e-09, - 0.99617666, 3.09302628e-08, 0.0873617008)
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Teletransporte",
        Text = "Teleported to Frozen Island",
        Duration = 0
    })
end)

teleport:AddButton("Mythical Island", function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoidRootPart.CFrame = CFrame.new(2255, 7, 1071)
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Teletransporte",
        Text = "Teleported to Mythical Island",
        Duration = 0
    })
end)

teleport:AddButton("Hell Island", function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoidRootPart.CFrame = CFrame.new(-6768, 7, -1287)
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Teletransporte",
        Text = "Teleported to Hell Island",
        Duration = 0
    })
end)

teleport:AddButton("Legend Island", function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoidRootPart.CFrame = CFrame.new(4604, 991, -3887)
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Teletransporte",
        Text = "Teleported to Legend Island",
        Duration = 0
    })
end)

teleport:AddButton("Muscle King Island", function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoidRootPart.CFrame = CFrame.new(-8646, 17, -5738)
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Teletransporte",
        Text = "Teleported to Muscle King",
        Duration = 0
    })
end)

teleport:AddButton("Jungle Island", function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoidRootPart.CFrame = CFrame.new(-8659, 6, 2384)
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Teletransporte",
        Text = "Teleported to Jungle Island",
        Duration = 0
    })
end)

teleport:AddButton("Brawl Lava", function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoidRootPart.CFrame = CFrame.new(4471, 119, -8836)
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Teletransporte",
        Text = "Teleported to Brawl Lava",
        Duration = 0
    })
end)

teleport:AddButton("Brawl Desert", function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoidRootPart.CFrame = CFrame.new(960, 17, -7398)
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Teletransporte",
        Text = "Teleported to Brawl Desert",
        Duration = 0
    })
end)

teleport:AddButton("Brawl Regular", function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoidRootPart.CFrame = CFrame.new(-1849, 20, -6335)
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Teletransporte",
        Text = "Teleported to Brawl Regular",
        Duration = 0
    })
end)

-- ============================================================================
-- CREDITS TAB
-- ============================================================================

creditsTab:AddLabel("╭──────────────────────────╮")
creditsTab:AddLabel(" Script hecho por Isabella")
creditsTab:AddLabel("╰──────────────────────────╯")
creditsTab:AddLabel("")
creditsTab:AddLabel("User de Roblox: MissSherya")
creditsTab:AddLabel("Instagram: Sherya_Luck")
creditsTab:AddLabel("TikTok: Sherya6000")
creditsTab:AddLabel("Discord: isabella_hrz")
creditsTab:AddLabel("")
creditsTab:AddLabel("Thanks por usar el script")
creditsTab:AddLabel("")
creditsTab:AddLabel("Recomienda el script para hacer mas actualizaciones")
creditsTab:AddLabel("Hago peticiones de otros juegos")
creditsTab:AddLabel("Diviertete amiguito")

creditsTab:AddButton("Servidor Discord", function()
    setclipboard("https://discord.gg/rnDrhTZZCF")
end)
