local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/memejames/elerium-v2-ui-library//main/Library", true))()
local window = library:AddWindow("Sherya Script | Galaxy Hub", {
    main_color = Color3.fromRGB(200, 0, 255),
    min_size = Vector2.new(660, 660),
    can_resize = false,
})

local Farm = window:AddTab("Farm")

local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

local targetRebirth = math.huge

local packFarmTarget = false
local packFarmInfinite = false
local fastStrength = false

local packRebirthValues = {
    [0] = 1,  
    [1] = 2,  
    [2] = 4,  
    [3] = 6,  
    [4] = 8,  
    [5] = 10, 
    [6] = 12, 
    [7] = 14, 
    [8] = 16  
}

local function safeCall(func)
    local success, result = pcall(func)
    if not success then
        warn("Error: " .. tostring(result))
    end
    return success, result
end

local function unequipAllPets()
    local petsFolder = player.petsFolder
    for _, folder in pairs(petsFolder:GetChildren()) do
        if folder:IsA("Folder") then
            for _, pet in pairs(folder:GetChildren()) do
                ReplicatedStorage.rEvents.equipPetEvent:FireServer("unequipPet", pet)
            end
        end
    end
    task.wait(0.1)
end

local function equipSpecificPacks(packName, count)
    unequipAllPets()
    task.wait(0.2)

    local packs = {}
    for _, pet in pairs(player.petsFolder.Unique:GetChildren()) do
        if pet.Name == packName then
            table.insert(packs, pet)
        end
    end

    local packsToEquip = math.min(count, #packs)
    for i = 1, packsToEquip do
        ReplicatedStorage.rEvents.equipPetEvent:FireServer("equipPet", packs[i])
        task.wait(0.1)
    end

    return packsToEquip
end

local function equipSpecificPets(petName, maxPets)
    safeCall(function()
        -- Primero unequipar todas las pets
        unequipAllPets()
        
        local petsToEquip = {}
        local uniqueFolder = game.Players.LocalPlayer.petsFolder.Unique
        
        if uniqueFolder then
            for _, pet in pairs(uniqueFolder:GetChildren()) do
                if pet.Name == petName then
                    table.insert(petsToEquip, pet)
                end
            end
        end

        local equippedCount = math.min(#petsToEquip, maxPets or 8)

        for i = 1, equippedCount do
            game:GetService("ReplicatedStorage").rEvents.equipPetEvent:FireServer("equipPet", petsToEquip[i])
            task.wait(0.1)
        end
        
        print("Equipped " .. equippedCount .. " " .. petName .. " pets")
    end)
end

local function findMachine(machineName)
    local machine = workspace.machinesFolder:FindFirstChild(machineName)
    if not machine then
        for _, folder in pairs(workspace:GetChildren()) do
            if folder:IsA("Folder") and folder.Name:find("machines") then
                machine = folder:FindFirstChild(machineName)
                if machine then break end
            end
        end
    end
    return machine
end

local function pressE()
    local vim = game:GetService("VirtualInputManager")
    vim:SendKeyEvent(true, "E", false, game)
    task.wait(0.1)
    vim:SendKeyEvent(false, "E", false, game)
end

local isPositionLocked = false
local originalCFrame = nil
local function lockPosition(lock)
    isPositionLocked = lock

    if lock and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        originalCFrame = player.Character.HumanoidRootPart.CFrame

        if not _G.positionConnection then
            _G.positionConnection = game:GetService("RunService").Heartbeat:Connect(function()
                if isPositionLocked and player.Character and player.Character:FindFirstChild("HumanoidRootPart") and originalCFrame then
                    player.Character.HumanoidRootPart.CFrame = originalCFrame
                    player.Character.HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
                    player.Character.HumanoidRootPart.RotVelocity = Vector3.new(0, 0, 0)
                end
            end)
        end
    elseif not lock and _G.positionConnection then
        _G.positionConnection:Disconnect()
        _G.positionConnection = nil
    end
end

Farm:AddTextBox("Target Rebirth Amount", function(text)
    local num = tonumber(text)
    if num then
        targetRebirth = num
    else
        targetRebirth = math.huge
    end
end)

local targetPackToggle = Farm:AddSwitch("Pack Farm | Target", function(bool)
    packFarmTarget = bool

    if bool then
        if packFarmInfinite then
            packFarmInfinite = false
            infinitePackToggle:Set(false)
        end

        if fastStrength then
            fastStrength = false
            fastStrengthToggle:Set(false)
        end

        if targetRebirth ~= math.huge and targetRebirth > player.leaderstats.Rebirths.Value then
            task.spawn(function()
                lockPosition(true)

                while packFarmTarget do
                    local currentRebirths = player.leaderstats.Rebirths.Value

                    if currentRebirths >= targetRebirth then
                        packFarmTarget = false
                        targetPackToggle:Set(false)
                        lockPosition(false)
                        break
                    end

                    local rebirthCost = 10000 + (5000 * currentRebirths)
                    if player.ultimatesFolder:FindFirstChild("Golden Rebirth") then
                        local goldenRebirths = player.ultimatesFolder["Golden Rebirth"].Value
                        rebirthCost = math.floor(rebirthCost * (1 - (goldenRebirths * 0.1)))
                    end

                    local rebirthsNeeded = targetRebirth - currentRebirths

                    local packCount = 0

                    if rebirthsNeeded == 1 then
                        packCount = 0
                    else
                        for i = 8, 1, -1 do
                            if packRebirthValues[i] <= rebirthsNeeded then
                                packCount = i
                                break
                            end
                        end
                    end

                    equipSpecificPacks("Swift Samurai", 8)

                    while packFarmTarget and player.leaderstats.Strength.Value < rebirthCost do
                        for i = 1, 10 do
                            player.muscleEvent:FireServer("rep")
                        end
                        task.wait()
                    end

                    equipSpecificPacks("Tribal Overlord", packCount)

                    local machine = findMachine("Jungle Bar Lift")
                    if machine and machine:FindFirstChild("interactSeat") then
                        player.Character.HumanoidRootPart.CFrame = machine.interactSeat.CFrame * CFrame.new(0, 3, 0)
                        repeat
                            task.wait(0.1)
                            pressE()
                        until player.Character.Humanoid.Sit
                    end

                    local initialRebirths = player.leaderstats.Rebirths.Value
                    repeat
                        ReplicatedStorage.rEvents.rebirthRemote:InvokeServer("rebirthRequest")
                        task.wait(0.1)
                    until player.leaderstats.Rebirths.Value > initialRebirths

                    task.wait(0.5)
                end

                lockPosition(false)
                unequipAllPets()
            end)
        else
            packFarmTarget = false
            targetPackToggle:Set(false)
        end
    else
        lockPosition(false)
        unequipAllPets()
    end
end)

local infinitePackToggle = Farm:AddSwitch("Pack Farm | Infinite", function(bool)
    packFarmInfinite = bool

    if bool then
        if packFarmTarget then
            packFarmTarget = false
            targetPackToggle:Set(false)
        end

        if fastStrength then
            fastStrength = false
            fastStrengthToggle:Set(false)
        end

        task.spawn(function()
            lockPosition(true)

            while packFarmInfinite do
                local currentRebirths = player.leaderstats.Rebirths.Value

                local rebirthCost = 10000 + (5000 * currentRebirths)
                if player.ultimatesFolder:FindFirstChild("Golden Rebirth") then
                    local goldenRebirths = player.ultimatesFolder["Golden Rebirth"].Value
                    rebirthCost = math.floor(rebirthCost * (1 - (goldenRebirths * 0.1)))
                end

                equipSpecificPacks("Swift Samurai", 8)

                while packFarmInfinite and player.leaderstats.Strength.Value < rebirthCost do
                    for i = 1, 10 do
                        player.muscleEvent:FireServer("rep")
                    end
                    task.wait()
                end

                equipSpecificPacks("Tribal Overlord", 8)

                local machine = findMachine("Jungle Bar Lift")
                if machine and machine:FindFirstChild("interactSeat") then
                    player.Character.HumanoidRootPart.CFrame = machine.interactSeat.CFrame * CFrame.new(0, 3, 0)
                    repeat
                        task.wait(0.1)
                        pressE()
                    until player.Character.Humanoid.Sit
                end

                local initialRebirths = player.leaderstats.Rebirths.Value
                repeat
                    ReplicatedStorage.rEvents.rebirthRemote:InvokeServer("rebirthRequest")
                    task.wait(0.1)
                until player.leaderstats.Rebirths.Value > initialRebirths

                task.wait(0.5)
            end

            lockPosition(false)
            unequipAllPets()
        end)
    else
        lockPosition(false)
        unequipAllPets()
    end
end)

local fastStrengthToggle = Farm:AddSwitch("Pack Farm | Fast Strength", function(bool)
    fastStrength = bool

    if bool then
        if packFarmTarget then
            packFarmTarget = false
            targetPackToggle:Set(false)
        end

        if packFarmInfinite then
            packFarmInfinite = false
            infinitePackToggle:Set(false)
        end

        task.spawn(function()
            equipSpecificPacks("Swift Samurai", 8)

            while fastStrength do
                for i = 1, 10 do
                    player.muscleEvent:FireServer("rep")
                end
                task.wait()
            end
        end)
    else
        unequipAllPets()
    end
end)

-- Botón para Swift Samurai
Farm:AddButton("Equip Swift Samurai (8x)", function()
    equipSpecificPets("Swift Samurai", 8)
end)

-- Botón para Tribal Overlord
Farm:AddButton("Equip Tribal Overlord (8x)", function()
    equipSpecificPets("Tribal Overlord", 8)
end)

Farm:AddSwitch("Delete All Frames", function(state)
    local rSto = game:GetService("ReplicatedStorage")
    for _, obj in pairs(rSto:GetChildren()) do
        if obj.Name:match("Frame$") and obj:IsA("GuiObject") then
            if state then
                obj:Destroy()
            end
        end
    end
end)

-- Anti Lag System
local Players = game:GetService("Players")
local Lighting = game:GetService("Lighting")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

local antiLagOn = false
local modifiedParts = {}
local charConn
local stepConn
local pointLight
local savedLighting = nil

local function snapshotLighting()
    return {
        Ambient = Lighting.Ambient,
        OutdoorAmbient = Lighting.OutdoorAmbient,
        Brightness = Lighting.Brightness,
        FogStart = Lighting.FogStart,
        FogEnd = Lighting.FogEnd,
        ClockTime = Lighting.ClockTime,
        GlobalShadows = Lighting.GlobalShadows,
    }
end

local function restoreLighting(snap)
    if not snap then return end
    Lighting.Ambient = snap.Ambient
    Lighting.OutdoorAmbient = snap.OutdoorAmbient
    Lighting.Brightness = snap.Brightness
    Lighting.FogStart = snap.FogStart
    Lighting.FogEnd = snap.FogEnd
    Lighting.ClockTime = snap.ClockTime
    Lighting.GlobalShadows = snap.GlobalShadows
end

local function applyBlackoutForCharacter(character)
    if not character then return end

    if not savedLighting then
        savedLighting = snapshotLighting()
    end
    Lighting.Ambient = Color3.new(0, 0, 0)
    Lighting.OutdoorAmbient = Color3.new(0, 0, 0)
    Lighting.Brightness = 0
    Lighting.GlobalShadows = true
    Lighting.ClockTime = 0
    Lighting.FogStart = 0
    Lighting.FogEnd = 20

    table.clear(modifiedParts)
    for _, inst in ipairs(workspace:GetDescendants()) do
        if inst:IsA("BasePart") and not inst:IsDescendantOf(character) then
            modifiedParts[inst] = inst.LocalTransparencyModifier
            inst.LocalTransparencyModifier = 1
        end
    end

    local hrp = character:FindFirstChild("HumanoidRootPart")
    if hrp then
        pointLight = pointLight or Instance.new("PointLight")
        pointLight.Parent = hrp
        pointLight.Range = 20
        pointLight.Brightness = 2
        pointLight.Shadows = false
    end
end

local function removeBlackout()
    if savedLighting then
        restoreLighting(savedLighting)
        savedLighting = nil
    end
    if pointLight then
        pcall(function() pointLight:Destroy() end)
        pointLight = nil
    end
    for part, prev in pairs(modifiedParts) do
        if part and part.Parent then
            part.LocalTransparencyModifier = prev or 0
        end
    end
    table.clear(modifiedParts)
end

local function bindCharacter(character)
    if not antiLagOn then return end
    task.delay(0.1, function()
        applyBlackoutForCharacter(character)
    end)
end

local function hookCharacterEvents()
    if charConn then charConn:Disconnect() end
    charConn = LocalPlayer.CharacterAdded:Connect(bindCharacter)
end

Farm:AddSwitch("Anti Lag (Blackout)", function(state)
    antiLagOn = state
    if state then
        local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        applyBlackoutForCharacter(character)
        hookCharacterEvents()

        if stepConn then stepConn:Disconnect() end
        stepConn = RunService.Heartbeat:Connect(function()
            if not antiLagOn then return end
            local character = LocalPlayer.Character
            for _, inst in ipairs(workspace:GetDescendants()) do
                if inst:IsA("BasePart") and (not character or not inst:IsDescendantOf(character)) then
                    if inst.LocalTransparencyModifier ~= 1 then
                        modifiedParts[inst] = inst.LocalTransparencyModifier
                        inst.LocalTransparencyModifier = 1
                    end
                end
            end
        end)
    else
        if stepConn then stepConn:Disconnect() stepConn = nil end
        if charConn then charConn:Disconnect() charConn = nil end
        removeBlackout()
    end
end)

-- Clean up connections when player leaves
player.AncestryChanged:Connect(function()
    if not player.Parent then        
        if _G.positionConnection then
            _G.positionConnection:Disconnect()
            _G.positionConnection = nil
        end
        
        if getgenv().posLock then
            getgenv().posLock:Disconnect()
            getgenv().posLock = nil
        end
        
        if stepConn then stepConn:Disconnect() end
        if charConn then charConn:Disconnect() end
    end
end)
